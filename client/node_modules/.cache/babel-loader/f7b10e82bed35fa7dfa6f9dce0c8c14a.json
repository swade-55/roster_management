{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Define the initial state with additional properties\nconst initialState = {\n  workers: [],\n  totalCapacity: 0,\n  averageAttendance: 0,\n  averageCPH: 0,\n  averageUptime: 0,\n  headCount: 0,\n  status: 'idle',\n  // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\n\n// Async thunk to fetch metrics\nexport const fetchMetrics = createAsyncThunk('metrics/fetchMetrics', async () => {\n  const response = await axios.get('http://localhost:5555/associate_metrics'); // Update the URL to your Flask API\n  return response.data;\n});\n\n// Extract and calculate metrics from worker data\nconst calculateMetrics = workers => {\n  let transformedWorkers = workers.map(worker => {\n    var _worker$metrics$find, _worker$metrics$find2, _worker$metrics$find3;\n    return {\n      attendance: ((_worker$metrics$find = worker.metrics.find(m => m.metric_name === 'Attendance')) === null || _worker$metrics$find === void 0 ? void 0 : _worker$metrics$find.value) || 0,\n      casesPerHour: ((_worker$metrics$find2 = worker.metrics.find(m => m.metric_name === 'Cases Per Hour')) === null || _worker$metrics$find2 === void 0 ? void 0 : _worker$metrics$find2.value) || 0,\n      uptime: ((_worker$metrics$find3 = worker.metrics.find(m => m.metric_name === 'Uptime')) === null || _worker$metrics$find3 === void 0 ? void 0 : _worker$metrics$find3.value) || 0\n    };\n  });\n  return {\n    totalCapacity: 0,\n    // Calculate totalCapacity based on your business logic\n    averageAttendance: transformedWorkers.reduce((sum, w) => sum + Number(w.attendance), 0) / (transformedWorkers.length || 1),\n    averageCPH: transformedWorkers.reduce((sum, w) => sum + Number(w.casesPerHour), 0) / (transformedWorkers.length || 1),\n    averageUptime: transformedWorkers.reduce((sum, w) => sum + Number(w.uptime), 0) / (transformedWorkers.length || 1),\n    headCount: workers.length\n  };\n};\nconst metricsSlice = createSlice({\n  name: 'metrics',\n  initialState,\n  reducers: {\n    // Reducer to manually set metrics\n    setMetrics: (state, action) => {\n      return {\n        ...state,\n        ...action.payload\n      };\n    }\n  },\n  extraReducers: {\n    [fetchMetrics.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchMetrics.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.workers = action.payload;\n      const newMetrics = calculateMetrics(action.payload);\n      state.totalCapacity = newMetrics.totalCapacity;\n      state.averageAttendance = newMetrics.averageAttendance;\n      state.averageCPH = newMetrics.averageCPH;\n      state.averageUptime = newMetrics.averageUptime;\n      state.headCount = newMetrics.headCount;\n    },\n    [fetchMetrics.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  setMetrics\n} = metricsSlice.actions;\nexport const updateMetrics = workers => dispatch => {\n  const metrics = calculateMetrics(workers);\n  dispatch(setMetrics(metrics));\n};\nexport default metricsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","workers","totalCapacity","averageAttendance","averageCPH","averageUptime","headCount","status","error","fetchMetrics","response","get","data","calculateMetrics","transformedWorkers","map","worker","_worker$metrics$find","_worker$metrics$find2","_worker$metrics$find3","attendance","metrics","find","m","metric_name","value","casesPerHour","uptime","reduce","sum","w","Number","length","metricsSlice","name","reducers","setMetrics","state","action","payload","extraReducers","pending","fulfilled","newMetrics","rejected","message","actions","updateMetrics","dispatch","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/metricsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Define the initial state with additional properties\nconst initialState = {\n  workers: [],\n  totalCapacity: 0,\n  averageAttendance: 0,\n  averageCPH: 0,\n  averageUptime: 0,\n  headCount: 0,\n  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\n\n// Async thunk to fetch metrics\nexport const fetchMetrics = createAsyncThunk('metrics/fetchMetrics', async () => {\n  const response = await axios.get('http://localhost:5555/associate_metrics'); // Update the URL to your Flask API\n  return response.data;\n});\n\n// Extract and calculate metrics from worker data\nconst calculateMetrics = (workers) => {\n  let transformedWorkers = workers.map(worker => ({\n    attendance: worker.metrics.find(m => m.metric_name === 'Attendance')?.value || 0,\n    casesPerHour: worker.metrics.find(m => m.metric_name === 'Cases Per Hour')?.value || 0,\n    uptime: worker.metrics.find(m => m.metric_name === 'Uptime')?.value || 0,\n  }));\n\n  return {\n    totalCapacity: 0, // Calculate totalCapacity based on your business logic\n    averageAttendance: transformedWorkers.reduce((sum, w) => sum + Number(w.attendance), 0) / (transformedWorkers.length || 1),\n    averageCPH: transformedWorkers.reduce((sum, w) => sum + Number(w.casesPerHour), 0) / (transformedWorkers.length || 1),\n    averageUptime: transformedWorkers.reduce((sum, w) => sum + Number(w.uptime), 0) / (transformedWorkers.length || 1),\n    headCount: workers.length,\n  };\n};\n\nconst metricsSlice = createSlice({\n  name: 'metrics',\n  initialState,\n  reducers: {\n    // Reducer to manually set metrics\n    setMetrics: (state, action) => {\n      return { ...state, ...action.payload };\n    },\n  },\n  extraReducers: {\n    [fetchMetrics.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchMetrics.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.workers = action.payload;\n      const newMetrics = calculateMetrics(action.payload);\n      state.totalCapacity = newMetrics.totalCapacity;\n      state.averageAttendance = newMetrics.averageAttendance;\n      state.averageCPH = newMetrics.averageCPH;\n      state.averageUptime = newMetrics.averageUptime;\n      state.headCount = newMetrics.headCount;\n    },\n    [fetchMetrics.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport const { setMetrics } = metricsSlice.actions;\n\nexport const updateMetrics = (workers) => (dispatch) => {\n  const metrics = calculateMetrics(workers);\n  dispatch(setMetrics(metrics));\n};\n\n\nexport default metricsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}