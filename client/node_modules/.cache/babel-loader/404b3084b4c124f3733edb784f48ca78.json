{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Button, Form, Table } from 'semantic-ui-react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchSchedule } from '../features/scheduleBuildSlice';\n\n// function ScheduleForm() {\n//   const [inputValues, setInputValues] = useState({\n//     sunday: 12,\n//     monday: 13,\n//     tuesday: 14,\n//     wednesday: 15,\n//     thursday: 16,\n//     friday: 17,\n//     // ... other days\n//   });\n//   const dispatch = useDispatch();\n\n//   // This will hold the fetched schedule once available\n//   const schedule = useSelector((state) => state.scheduleBuilder.data);\n\n//   useEffect(() => {\n//     console.log('Component mounted. Dispatching fetchSchedule with initial values.');\n//     // Dispatch fetchSchedule action when the component mounts\n//     dispatch(fetchSchedule(inputValues));\n//   }, [dispatch, inputValues]);\n\n//   const handleSliderChange = (name, value) => {\n//     setInputValues({ ...inputValues, [name]: value });\n//   };\n\n//   const handleSubmit = () => {\n//     console.log('Submitting user input for schedule generation:', inputValues);\n//     dispatch(fetchSchedule(inputValues));\n//   };\n\n//   const scheduleData = useSelector((state) => state.scheduleBuilder.data);\n\n//   // Define a function to render the schedule table\n//   function ScheduleTable({ schedule }) {\n//     // The data prop passed to ScheduleTable contains the entire object including status and total_staff.\n//     // You need to access the 'schedule' key of this object to get the shifts.\n//     const shiftData = schedule.schedule;\n\n//     // Log the shift data to confirm it's what you expect\n//     console.log('Shift data:', shiftData);\n\n//     const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n\n//     // Map over the days array to create table rows\n//     const scheduleRows = days.map((day) => ({\n//       day,\n//       staff: shiftData[`Shift for ${day}`] || 0 // Use || 0 to default to 0 if undefined\n//     }));\n\n//     return (\n//       <Table celled>\n//         <Table.Header>\n//           <Table.Row>\n//             <Table.HeaderCell>Shift</Table.HeaderCell>\n//             {days.map((day) => <Table.HeaderCell key={day}>{day}</Table.HeaderCell>)}\n//           </Table.Row>\n//         </Table.Header>\n//         <Table.Body>\n//           {scheduleRows.map((shift) => (\n//             <Table.Row key={shift.day}>\n//               <Table.Cell>{`Shift: ${shift.day}`}</Table.Cell>\n//               {days.map((day) => (\n//                 <Table.Cell key={day}>{shift.day === day ? shift.staff : 0}</Table.Cell>\n//               ))}\n//             </Table.Row>\n//           ))}\n//         </Table.Body>\n//       </Table>\n//     );\n//   }\n\n//   function DisplaySchedule() {\n//     if (!schedule) return <div>No schedule data available.</div>;\n\n//     return (\n//       <div>\n//         <h3>Schedule Results:</h3>\n//         {/* Display schedule data here */}\n//         <ul>\n//           {Object.entries(schedule).map(([key, value]) => (\n//             <li key={key}>{`${key}: ${value}`}</li>\n//           ))}\n//         </ul>\n//       </div>\n//     );\n//   }\n\n//   // Update the return statement to include ScheduleTable\n//   return (\n//     <div>\n//       <Form>\n//       {/* Sunday Field */}\n//       <Form.Field>\n//         <label>Sunday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.sunday}\n//           onChange={(e) => handleSliderChange('sunday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Monday Field */}\n//       <Form.Field>\n//         <label>Monday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.monday}\n//           onChange={(e) => handleSliderChange('monday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Tuesday Field */}\n//       <Form.Field>\n//         <label>Tuesday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.tuesday}\n//           onChange={(e) => handleSliderChange('tuesday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Wednesday Field */}\n//       <Form.Field>\n//         <label>Wednesday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.wednesday}\n//           onChange={(e) => handleSliderChange('wednesday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Thursday Field */}\n//       <Form.Field>\n//         <label>Thursday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.thursday}\n//           onChange={(e) => handleSliderChange('thursday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Friday Field */}\n//       <Form.Field>\n//         <label>Friday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.friday}\n//           onChange={(e) => handleSliderChange('friday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n//     </Form>\n//       <Button onClick={handleSubmit} primary>\n//         Generate Schedule\n//       </Button>\n//       <DisplaySchedule />\n//       {scheduleData && <ScheduleTable schedule={scheduleData} />}\n//     </div>\n//   );\n// }\n\n// export default ScheduleForm;","map":{"version":3,"names":[],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ScheduleForm.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Button, Form, Table } from 'semantic-ui-react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchSchedule } from '../features/scheduleBuildSlice';\n\n// function ScheduleForm() {\n//   const [inputValues, setInputValues] = useState({\n//     sunday: 12,\n//     monday: 13,\n//     tuesday: 14,\n//     wednesday: 15,\n//     thursday: 16,\n//     friday: 17,\n//     // ... other days\n//   });\n//   const dispatch = useDispatch();\n\n//   // This will hold the fetched schedule once available\n//   const schedule = useSelector((state) => state.scheduleBuilder.data);\n\n//   useEffect(() => {\n//     console.log('Component mounted. Dispatching fetchSchedule with initial values.');\n//     // Dispatch fetchSchedule action when the component mounts\n//     dispatch(fetchSchedule(inputValues));\n//   }, [dispatch, inputValues]);\n\n//   const handleSliderChange = (name, value) => {\n//     setInputValues({ ...inputValues, [name]: value });\n//   };\n\n//   const handleSubmit = () => {\n//     console.log('Submitting user input for schedule generation:', inputValues);\n//     dispatch(fetchSchedule(inputValues));\n//   };\n\n//   const scheduleData = useSelector((state) => state.scheduleBuilder.data);\n\n\n//   // Define a function to render the schedule table\n//   function ScheduleTable({ schedule }) {\n//     // The data prop passed to ScheduleTable contains the entire object including status and total_staff.\n//     // You need to access the 'schedule' key of this object to get the shifts.\n//     const shiftData = schedule.schedule;\n  \n//     // Log the shift data to confirm it's what you expect\n//     console.log('Shift data:', shiftData);\n  \n//     const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n  \n//     // Map over the days array to create table rows\n//     const scheduleRows = days.map((day) => ({\n//       day,\n//       staff: shiftData[`Shift for ${day}`] || 0 // Use || 0 to default to 0 if undefined\n//     }));\n  \n//     return (\n//       <Table celled>\n//         <Table.Header>\n//           <Table.Row>\n//             <Table.HeaderCell>Shift</Table.HeaderCell>\n//             {days.map((day) => <Table.HeaderCell key={day}>{day}</Table.HeaderCell>)}\n//           </Table.Row>\n//         </Table.Header>\n//         <Table.Body>\n//           {scheduleRows.map((shift) => (\n//             <Table.Row key={shift.day}>\n//               <Table.Cell>{`Shift: ${shift.day}`}</Table.Cell>\n//               {days.map((day) => (\n//                 <Table.Cell key={day}>{shift.day === day ? shift.staff : 0}</Table.Cell>\n//               ))}\n//             </Table.Row>\n//           ))}\n//         </Table.Body>\n//       </Table>\n//     );\n//   }\n  \n  \n\n//   function DisplaySchedule() {\n//     if (!schedule) return <div>No schedule data available.</div>;\n  \n//     return (\n//       <div>\n//         <h3>Schedule Results:</h3>\n//         {/* Display schedule data here */}\n//         <ul>\n//           {Object.entries(schedule).map(([key, value]) => (\n//             <li key={key}>{`${key}: ${value}`}</li>\n//           ))}\n//         </ul>\n//       </div>\n//     );\n//   }\n  \n\n//   // Update the return statement to include ScheduleTable\n//   return (\n//     <div>\n//       <Form>\n//       {/* Sunday Field */}\n//       <Form.Field>\n//         <label>Sunday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.sunday}\n//           onChange={(e) => handleSliderChange('sunday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Monday Field */}\n//       <Form.Field>\n//         <label>Monday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.monday}\n//           onChange={(e) => handleSliderChange('monday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Tuesday Field */}\n//       <Form.Field>\n//         <label>Tuesday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.tuesday}\n//           onChange={(e) => handleSliderChange('tuesday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Wednesday Field */}\n//       <Form.Field>\n//         <label>Wednesday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.wednesday}\n//           onChange={(e) => handleSliderChange('wednesday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Thursday Field */}\n//       <Form.Field>\n//         <label>Thursday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.thursday}\n//           onChange={(e) => handleSliderChange('thursday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n\n//       {/* Friday Field */}\n//       <Form.Field>\n//         <label>Friday Needs (heads)</label>\n//         <input\n//           type='range'\n//           min={1}\n//           max={100}\n//           value={inputValues.friday}\n//           onChange={(e) => handleSliderChange('friday', parseInt(e.target.value))}\n//         />\n//       </Form.Field>\n//     </Form>\n//       <Button onClick={handleSubmit} primary>\n//         Generate Schedule\n//       </Button>\n//       <DisplaySchedule />\n//       {scheduleData && <ScheduleTable schedule={scheduleData} />}\n//     </div>\n//   );\n// }\n\n// export default ScheduleForm;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}