{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const postSchedule = createAsyncThunk('schedule/postSchedule', async (df_staff, thunkAPI) => {\n  const response = await fetch('/api/optimize_schedule', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(df_staff)\n  });\n  const data = await response.json();\n  return data;\n});\nexport const scheduleSlice = createSlice({\n  name: 'schedule',\n  initialState: {\n    data: null,\n    // Make sure to include a 'data' property in the initial state\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(postSchedule.pending, state => {\n      state.status = 'loading';\n    }).addCase(postSchedule.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload; // Make sure to update the 'data' property in the fulfilled case\n    }).addCase(postSchedule.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default scheduleSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","postSchedule","df_staff","thunkAPI","response","fetch","method","headers","body","JSON","stringify","data","json","scheduleSlice","name","initialState","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/scheduleBuildSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const postSchedule = createAsyncThunk(\n  'schedule/postSchedule',\n  async (df_staff, thunkAPI) => {\n    const response = await fetch('/api/optimize_schedule', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(df_staff)\n    });\n    const data = await response.json();\n    return data;\n  }\n);\n\nexport const scheduleSlice = createSlice({\n  name: 'schedule',\n  initialState: {\n    data: null, // Make sure to include a 'data' property in the initial state\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(postSchedule.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(postSchedule.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = action.payload; // Make sure to update the 'data' property in the fulfilled case\n      })\n      .addCase(postSchedule.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  }\n});\n\nexport default scheduleSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,YAAY,GAAGD,gBAAgB,CAC1C,uBAAuB,EACvB,OAAOE,QAAQ,EAAEC,QAAQ,KAAK;EAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,EAAE;IACrDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;EAC/B,CAAC,CAAC;EACF,MAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI;AACb,CACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAGd,WAAW,CAAC;EACvCe,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZJ,IAAI,EAAE,IAAI;IAAE;IACZK,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACpB,YAAY,CAACqB,OAAO,EAAGC,KAAK,IAAK;MACxCA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACpB,YAAY,CAACuB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACZ,IAAI,GAAGc,MAAM,CAACC,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC,CACDL,OAAO,CAACpB,YAAY,CAAC0B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACjDF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAef,aAAa,CAACgB,OAAO"},"metadata":{},"sourceType":"module"}