{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ExecutiveSummary.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExecutiveSummary() {\n  _s();\n  const workers = useSelector(state => state.workers.workers);\n\n  // Group workers by department and then by job class\n  const workersByDepartmentAndJobClass = workers.reduce((acc, worker) => {\n    const deptName = worker.department.name;\n    const jobClassName = worker.jobclass.name;\n    if (!acc[deptName]) {\n      acc[deptName] = {};\n    }\n    if (!acc[deptName][jobClassName]) {\n      acc[deptName][jobClassName] = [];\n    }\n    acc[deptName][jobClassName].push(worker);\n    return acc;\n  }, {});\n\n  // Calculate average uptime by department and job class\n  const calculateAverageUptime = workers => {\n    if (workers.length === 0) return 0;\n    const totalUptime = workers.reduce((total, worker) => total + (worker.metrics.Uptime || 0), 0);\n    return totalUptime / workers.length;\n  };\n  const getAverageUptimeByDepartmentAndJobClass = () => {\n    return Object.entries(workersByDepartmentAndJobClass).map(_ref => {\n      let [department, jobClasses] = _ref;\n      return {\n        department,\n        jobClasses: Object.entries(jobClasses).map(_ref2 => {\n          let [jobClass, workers] = _ref2;\n          return {\n            jobClass,\n            averageUptime: calculateAverageUptime(workers)\n          };\n        })\n      };\n    });\n  };\n  const averageUptimeData = getAverageUptimeByDepartmentAndJobClass();\n\n  // Function to round numbers to two decimal places\n  const formatNumber = num => Math.round(num * 100) / 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Capacity Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Average Uptime by Department and Job Class\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), averageUptimeData.map(_ref3 => {\n      let {\n        department,\n        jobClasses\n      } = _ref3;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: department\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"ui celled table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Job Class\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Average Uptime (%)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jobClasses.map(_ref4 => {\n              let {\n                jobClass,\n                averageUptime\n              } = _ref4;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jobClass\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [formatNumber(averageUptime), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 19\n                }, this)]\n              }, jobClass, true, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, department, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(ExecutiveSummary, \"gT0c/2LPjxcQwtHXsMj1ct2k/oM=\", false, function () {\n  return [useSelector];\n});\n_c = ExecutiveSummary;\nexport default ExecutiveSummary;\nvar _c;\n$RefreshReg$(_c, \"ExecutiveSummary\");","map":{"version":3,"names":["React","useSelector","jsxDEV","_jsxDEV","ExecutiveSummary","_s","workers","state","workersByDepartmentAndJobClass","reduce","acc","worker","deptName","department","name","jobClassName","jobclass","push","calculateAverageUptime","length","totalUptime","total","metrics","Uptime","getAverageUptimeByDepartmentAndJobClass","Object","entries","map","_ref","jobClasses","_ref2","jobClass","averageUptime","averageUptimeData","formatNumber","num","Math","round","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_ref3","_ref4","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ExecutiveSummary.js"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n\nfunction ExecutiveSummary() {\n  const workers = useSelector(state => state.workers.workers);\n\n  // Group workers by department and then by job class\n  const workersByDepartmentAndJobClass = workers.reduce((acc, worker) => {\n    const deptName = worker.department.name;\n    const jobClassName = worker.jobclass.name;\n\n    if (!acc[deptName]) {\n      acc[deptName] = {};\n    }\n    if (!acc[deptName][jobClassName]) {\n      acc[deptName][jobClassName] = [];\n    }\n\n    acc[deptName][jobClassName].push(worker);\n    return acc;\n  }, {});\n\n  // Calculate average uptime by department and job class\n  const calculateAverageUptime = (workers) => {\n    if (workers.length === 0) return 0;\n    const totalUptime = workers.reduce((total, worker) => total + (worker.metrics.Uptime || 0), 0);\n    return totalUptime / workers.length;\n  };\n\n  const getAverageUptimeByDepartmentAndJobClass = () => {\n    return Object.entries(workersByDepartmentAndJobClass).map(([department, jobClasses]) => ({\n      department,\n      jobClasses: Object.entries(jobClasses).map(([jobClass, workers]) => ({\n        jobClass,\n        averageUptime: calculateAverageUptime(workers)\n      }))\n    }));\n  };\n\n  const averageUptimeData = getAverageUptimeByDepartmentAndJobClass();\n\n  // Function to round numbers to two decimal places\n  const formatNumber = (num) => Math.round(num * 100) / 100;\n\n  return (\n    <div className=\"header-container\">\n      <h1>Capacity Planner</h1>\n      {/* Additional tables and metrics can be added here as necessary */}\n      \n      {/* New Table for Uptime by Department and Job Class */}\n      <h2>Average Uptime by Department and Job Class</h2>\n      {averageUptimeData.map(({ department, jobClasses }) => (\n        <div key={department}>\n          <h3>{department}</h3>\n          <table className=\"ui celled table\">\n            <thead>\n              <tr>\n                <th>Job Class</th>\n                <th>Average Uptime (%)</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jobClasses.map(({ jobClass, averageUptime }) => (\n                <tr key={jobClass}>\n                  <td>{jobClass}</td>\n                  <td>{formatNumber(averageUptime)}%</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ExecutiveSummary;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}