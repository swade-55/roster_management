{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  workers: [],\n  status: 'idle',\n  error: null\n};\n// Async thunk action for adding a worker\nexport const addWorker = createAsyncThunk('workers/addWorker', async (workerData, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  try {\n    const response = await fetch('http://localhost:5555/add_associate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(workerData)\n    });\n    if (!response.ok) throw new Error('Server error!');\n    const responseData = await response.json();\n    return responseData;\n  } catch (error) {\n    console.error('Error in addWorker thunk:', error);\n    return rejectWithValue(error.message);\n  }\n});\n\n// export const fetchWorkers = createAsyncThunk(\n//   'workers/fetchWorkers',\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const response = await fetch('http://localhost:5555/associates_details');\n//       if (!response.ok) throw new Error('Server error!');\n//       return await response.json();\n//     } catch (error) {\n//       console.error('Error in updateAssociate thunk:', error);\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\nexport const deleteWorker = createAsyncThunk('/workers/deleteWorker', async (workerId, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n  try {\n    const response = await fetch(`/associate_metrics/${workerId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return workerId;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchWorkers = createAsyncThunk('workers/fetchWorkers', async () => {\n  const url = `http://localhost:5555/associates_details`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch contacts');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const updateAssociate = createAsyncThunk('workers/updateAssociate', async (associateData, _ref3) => {\n  let {\n    rejectWithValue\n  } = _ref3;\n  try {\n    const response = await fetch(`http://localhost:5555/update_associate`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(associateData)\n    });\n    if (!response.ok) {\n      throw new Error('Server error!');\n    }\n    const updatedAssociate = await response.json();\n    return updatedAssociate;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst workersSlice = createSlice({\n  name: 'workers',\n  initialState,\n  status: 'idle',\n  reducers: {\n    // Reducer to set workers\n    setWorkers: (state, action) => action.payload,\n    // Reducer to delete a worker\n    updateWorker: (state, action) => {\n      const index = state.findIndex(worker => worker.id === action.payload.id);\n      if (index !== -1) {\n        state[index] = {\n          ...state[index],\n          ...action.payload.data\n        };\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(addWorker.fulfilled, (state, action) => {\n      // Add the new worker to the state\n      state.push(action.payload);\n    }).addCase(addWorker.rejected, (state, action) => {\n      // Handle the case where adding a worker fails\n\n      console.error('Failed to add worker:', action.payload);\n    }).addCase(fetchWorkers.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // return action.payload;\n      state.workers = action.payload;\n    }).addCase(updateAssociate.fulfilled, (state, action) => {\n      const index = state.findIndex(worker => worker.id === action.payload.associateId);\n      if (index !== -1) {\n        state[index] = {\n          ...state[index],\n          metrics: action.payload.metrics\n        };\n      }\n    }).addCase(deleteWorker.fulfilled, (state, action) => {\n      state.workers = state.workers.filter(worker => worker.id !== action.payload);\n    }).addCase(updateAssociate.rejected, (state, action) => {\n      console.error('Failed to update worker:', action.payload);\n    });\n  }\n});\nexport const {\n  setWorkers,\n  updateWorker\n} = workersSlice.actions;\nexport default workersSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","workers","status","error","addWorker","workerData","_ref","rejectWithValue","response","fetch","method","headers","body","JSON","stringify","ok","Error","responseData","json","console","message","deleteWorker","workerId","_ref2","fetchWorkers","url","data","updateAssociate","associateData","_ref3","updatedAssociate","workersSlice","name","reducers","setWorkers","state","action","payload","updateWorker","index","findIndex","worker","id","extraReducers","builder","addCase","fulfilled","push","rejected","associateId","metrics","filter","actions","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/workersSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n  workers: [],\n  status: 'idle',\n  error: null,\n};\n// Async thunk action for adding a worker\nexport const addWorker = createAsyncThunk(\n  'workers/addWorker',\n  async (workerData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('http://localhost:5555/add_associate', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(workerData),\n});\n\n      if (!response.ok) throw new Error('Server error!');\n      const responseData =  await response.json();\n      return responseData;\n    } catch (error) {\n      console.error('Error in addWorker thunk:', error);\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// export const fetchWorkers = createAsyncThunk(\n//   'workers/fetchWorkers',\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const response = await fetch('http://localhost:5555/associates_details');\n//       if (!response.ok) throw new Error('Server error!');\n//       return await response.json();\n//     } catch (error) {\n//       console.error('Error in updateAssociate thunk:', error);\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\nexport const deleteWorker = createAsyncThunk('/workers/deleteWorker', async(workerId, {rejectWithValue}) =>{\n  try {\n    const response = await fetch(`/associate_metrics/${workerId}`,{\n      method:'DELETE',\n    });\n    if (!response.ok){\n      throw new Error('Network response was not ok');\n    }\n    return workerId;\n  } catch(error){\n    return rejectWithValue(error.message);\n  }\n})\n\nexport const fetchWorkers = createAsyncThunk('workers/fetchWorkers', async () => {\n  const url = `http://localhost:5555/associates_details`; \n  const response = await fetch(url);\n\n  if (!response.ok) {\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch contacts');\n  }\n\n  const data = await response.json();\n  return data;\n});\n\nexport const updateAssociate = createAsyncThunk(\n  'workers/updateAssociate',\n  async (associateData, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`http://localhost:5555/update_associate`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(associateData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Server error!');\n      }\n\n      const updatedAssociate = await response.json();\n      return updatedAssociate;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst workersSlice = createSlice({\n  name: 'workers',\n  initialState,\n  status: 'idle',\n  reducers: {\n    // Reducer to set workers\n    setWorkers: (state, action) => action.payload,\n    // Reducer to delete a worker\n    updateWorker: (state, action) => {\n      const index = state.findIndex(worker => worker.id === action.payload.id);\n      if (index !== -1) {\n        state[index] = { ...state[index], ...action.payload.data };\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(addWorker.fulfilled, (state, action) => {\n        // Add the new worker to the state\n        state.push(action.payload);\n      })\n      .addCase(addWorker.rejected, (state, action) => {\n        // Handle the case where adding a worker fails\n        \n        console.error('Failed to add worker:', action.payload);\n      })\n      .addCase(fetchWorkers.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // return action.payload;\n        state.workers = action.payload\n      })\n      .addCase(updateAssociate.fulfilled, (state, action) => {\n        const index = state.findIndex(worker => worker.id === action.payload.associateId);\n        if (index !== -1) {\n          state[index] = { ...state[index], metrics: action.payload.metrics };\n        }\n      })\n      .addCase(deleteWorker.fulfilled, (state, action) => {\n        state.workers = state.workers.filter(worker => worker.id !== action.payload);\n      })      \n      .addCase(updateAssociate.rejected, (state, action) => {\n        console.error('Failed to update worker:', action.payload);\n      });\n  },\n});\n\nexport const { setWorkers, updateWorker } = workersSlice.actions;\nexport default workersSlice.reducer;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}