{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociateCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteWorker, updateAssociate } from '../features/workersSlice';\nimport Metric from './Metric';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AssociateCard(_ref) {\n  _s();\n  let {\n    worker\n  } = _ref;\n  const dispatch = useDispatch();\n  const [editMode, setEditMode] = useState(false);\n  const [firstName, setFirstName] = useState(worker.first_name);\n  const [lastName, setLastName] = useState(worker.last_name);\n  const [metrics, setMetrics] = useState(worker.metrics.map(metric => ({\n    id: metric.id,\n    // Ensure the metric ID is included\n    value: metric.value\n  })));\n  function handleWorkerDelete() {\n    fetch(`http://localhost:5555/associate_metrics/${worker.id}`, {\n      method: 'DELETE'\n    }).then(r => r.json()).then(data => {\n      dispatch(deleteWorker(worker.id));\n    });\n  }\n  function handleUpdate() {\n    const updatedData = {\n      associateId: worker.id,\n      firstName: firstName,\n      lastName: lastName,\n      metrics: metrics\n    };\n    dispatch(updateAssociate(updatedData)).unwrap().then(response => {\n      setEditMode(false);\n    }).catch(error => {\n      console.error('Error updating associate:', error);\n    });\n  }\n  function handleMetricChange(metricId, newValue) {\n    // Map over the metrics and update the value where the id matches\n    const newMetrics = metrics.map(metric => {\n      if (metric.id === metricId) {\n        return {\n          ...metric,\n          value: parseInt(newValue, 10)\n        };\n      }\n      return metric;\n    });\n    setMetrics(newMetrics);\n  }\n  const metricInputs = metrics.map((metric, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"number\",\n    value: metric.value,\n    onChange: e => handleMetricChange(metric.id, e.target.value)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this));\n  return (\n    /*#__PURE__*/\n    // <div className=\"ui card\">\n    //   <div className=\"content\">\n    //     {editMode ? (\n    //       <div className=\"ui form\">\n    //         <div className=\"field\">\n    //           <label>First Name</label>\n    //           <input\n    //             type=\"text\"\n    //             value={firstName}\n    //             onChange={e => setFirstName(e.target.value)}\n    //           />\n    //         </div>\n    //         <div className=\"field\">\n    //           <label>Last Name</label>\n    //           <input\n    //             type=\"text\"\n    //             value={lastName}\n    //             onChange={e => setLastName(e.target.value)}\n    //           />\n    //         </div>\n    //         <div className=\"field\">\n    //           <label>Metrics</label>\n    //           {metricInputs}\n    //         </div>\n    //         <button onClick={handleUpdate} className=\"ui button primary\">Save</button>\n    //         <button onClick={() => setEditMode(false)} className=\"ui button\">Cancel</button>\n    //       </div>\n    //     ) : (\n    //       <>\n    //         <div className=\"header\">{firstName} {lastName}</div>\n    //         <div className=\"meta\">{worker.job_class}</div>\n    //         <div className=\"content\">\n    //           <h4 className=\"ui sub header\">Metrics</h4>\n    //           <div className=\"ui small feed\">\n    //             {worker.metrics.map((metric, index) => (\n    //               <Metric key={index} metric={metric} />\n    //             ))}\n    //           </div>\n    //         </div>\n    //         <button onClick={() => setEditMode(true)} className=\"ui button\">Edit</button>\n    //       </>\n    //     )}\n    //   </div>\n    //   <div className=\"extra content\">\n    //     <button onClick={handleWorkerDelete} className=\"ui button\">Delete</button>\n    //   </div> \n    // </div>\n    _jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(AssociateCard, \"Zn1vTodzrIYT0kkHSI37mjK1wZs=\", false, function () {\n  return [useDispatch];\n});\n_c = AssociateCard;\nexport default AssociateCard;\nvar _c;\n$RefreshReg$(_c, \"AssociateCard\");","map":{"version":3,"names":["React","useState","useDispatch","deleteWorker","updateAssociate","Metric","jsxDEV","_jsxDEV","AssociateCard","_ref","_s","worker","dispatch","editMode","setEditMode","firstName","setFirstName","first_name","lastName","setLastName","last_name","metrics","setMetrics","map","metric","id","value","handleWorkerDelete","fetch","method","then","r","json","data","handleUpdate","updatedData","associateId","unwrap","response","catch","error","console","handleMetricChange","metricId","newValue","newMetrics","parseInt","metricInputs","index","type","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociateCard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteWorker, updateAssociate } from '../features/workersSlice';\nimport Metric from './Metric';\n\nfunction AssociateCard({ worker }) {\n\n  const dispatch = useDispatch();\n  const [editMode, setEditMode] = useState(false);\n  const [firstName, setFirstName] = useState(worker.first_name);\n  const [lastName, setLastName] = useState(worker.last_name);\n  const [metrics, setMetrics] = useState(worker.metrics.map(metric => ({\n    id: metric.id, // Ensure the metric ID is included\n    value: metric.value\n  })));\n  \n\n  function handleWorkerDelete() {\n    fetch(`http://localhost:5555/associate_metrics/${worker.id}`, {\n      method: 'DELETE',\n    })\n    .then(r => r.json())\n    .then(data => {\n      dispatch(deleteWorker(worker.id));\n    });\n  }\n\n  function handleUpdate() {\n    const updatedData = {\n      associateId: worker.id,\n      firstName: firstName,\n      lastName: lastName,\n      metrics: metrics \n    };\n  \n\n    dispatch(updateAssociate(updatedData))\n      .unwrap()\n      .then(response => {\n        setEditMode(false);\n      })\n      .catch(error => {\n        console.error('Error updating associate:', error);\n      });\n  }\n  \n\n  function handleMetricChange(metricId, newValue) {\n    // Map over the metrics and update the value where the id matches\n    const newMetrics = metrics.map(metric => {\n      if (metric.id === metricId) {\n        return { ...metric, value: parseInt(newValue, 10) };\n      }\n      return metric;\n    });\n    setMetrics(newMetrics);\n  }\n  \n\n\n  const metricInputs = metrics.map((metric, index) => (\n    <input\n      key={index}\n      type=\"number\"\n      value={metric.value}\n      onChange={e => handleMetricChange(metric.id, e.target.value)}\n    />\n  ));\n  \n\n  return (\n    // <div className=\"ui card\">\n    //   <div className=\"content\">\n    //     {editMode ? (\n    //       <div className=\"ui form\">\n    //         <div className=\"field\">\n    //           <label>First Name</label>\n    //           <input\n    //             type=\"text\"\n    //             value={firstName}\n    //             onChange={e => setFirstName(e.target.value)}\n    //           />\n    //         </div>\n    //         <div className=\"field\">\n    //           <label>Last Name</label>\n    //           <input\n    //             type=\"text\"\n    //             value={lastName}\n    //             onChange={e => setLastName(e.target.value)}\n    //           />\n    //         </div>\n    //         <div className=\"field\">\n    //           <label>Metrics</label>\n    //           {metricInputs}\n    //         </div>\n    //         <button onClick={handleUpdate} className=\"ui button primary\">Save</button>\n    //         <button onClick={() => setEditMode(false)} className=\"ui button\">Cancel</button>\n    //       </div>\n    //     ) : (\n    //       <>\n    //         <div className=\"header\">{firstName} {lastName}</div>\n    //         <div className=\"meta\">{worker.job_class}</div>\n    //         <div className=\"content\">\n    //           <h4 className=\"ui sub header\">Metrics</h4>\n    //           <div className=\"ui small feed\">\n    //             {worker.metrics.map((metric, index) => (\n    //               <Metric key={index} metric={metric} />\n    //             ))}\n    //           </div>\n    //         </div>\n    //         <button onClick={() => setEditMode(true)} className=\"ui button\">Edit</button>\n    //       </>\n    //     )}\n    //   </div>\n    //   <div className=\"extra content\">\n    //     <button onClick={handleWorkerDelete} className=\"ui button\">Delete</button>\n    //   </div> \n    // </div>\n    <div>\n      \n    </div>\n  );\n}\n\nexport default AssociateCard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}