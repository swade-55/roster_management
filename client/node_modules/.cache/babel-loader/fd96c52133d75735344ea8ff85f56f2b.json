{"ast":null,"code":"// metricsSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\nconst calculateMetrics = workers => {\n  let totalAttendance = workers.reduce((sum, worker) => sum + worker.attendance, 0);\n  let attendanceAverage = totalAttendance / workers.length || 0;\n  let totalCPH = workers.reduce((sum, worker) => sum + worker.casesPerHour, 0);\n  let cphAverage = totalCPH / workers.length || 0;\n  let totalUptime = workers.reduce((sum, worker) => sum + worker.uptime, 0);\n  let uptimeAverage = totalUptime / workers.length || 0;\n  let casesArray = workers.map(worker => worker.casesPerHour * (worker.uptime / 100) * 8);\n  let capacity = casesArray.reduce((sum, value) => sum + value, 0);\n  return {\n    totalCapacity: capacity,\n    averageAttendance: attendanceAverage,\n    averageCPH: cphAverage,\n    averageUptime: uptimeAverage,\n    headCount: workers.length\n  };\n};\nconst metricsSlice = createSlice({\n  name: 'metrics',\n  initialState: {\n    totalCapacity: 0,\n    averageAttendance: 0,\n    averageCPH: 0,\n    averageUptime: 0,\n    headCount: 0\n  },\n  reducers: {\n    setMetrics: (state, action) => {\n      return action.payload;\n    }\n  }\n});\nexport const {\n  setMetrics\n} = metricsSlice.actions;\n\n// New action creator for updating metrics based on workers data\nexport const updateMetrics = workers => dispatch => {\n  const metrics = calculateMetrics(workers);\n  dispatch(setMetrics(metrics));\n};\nexport default metricsSlice.reducer;","map":{"version":3,"names":["createSlice","calculateMetrics","workers","totalAttendance","reduce","sum","worker","attendance","attendanceAverage","length","totalCPH","casesPerHour","cphAverage","totalUptime","uptime","uptimeAverage","casesArray","map","capacity","value","totalCapacity","averageAttendance","averageCPH","averageUptime","headCount","metricsSlice","name","initialState","reducers","setMetrics","state","action","payload","actions","updateMetrics","dispatch","metrics","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/metricsSlice.js"],"sourcesContent":["// metricsSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst calculateMetrics = (workers) => {\n  let totalAttendance = workers.reduce((sum, worker) => sum + worker.attendance, 0);\n  let attendanceAverage = totalAttendance / workers.length || 0;\n\n  let totalCPH = workers.reduce((sum, worker) => sum + worker.casesPerHour, 0);\n  let cphAverage = totalCPH / workers.length || 0;\n\n  let totalUptime = workers.reduce((sum, worker) => sum + worker.uptime, 0);\n  let uptimeAverage = totalUptime / workers.length || 0;\n\n  let casesArray = workers.map(worker => worker.casesPerHour * (worker.uptime / 100) * 8);\n  let capacity = casesArray.reduce((sum, value) => sum + value, 0);\n\n  return {\n    totalCapacity: capacity,\n    averageAttendance: attendanceAverage,\n    averageCPH: cphAverage,\n    averageUptime: uptimeAverage,\n    headCount: workers.length,\n  };\n};\n\nconst metricsSlice = createSlice({\n  name: 'metrics',\n  initialState: {\n    totalCapacity: 0,\n    averageAttendance: 0,\n    averageCPH: 0,\n    averageUptime: 0,\n    headCount: 0,\n  },\n  reducers: {\n    setMetrics: (state, action) => {\n      return action.payload;\n    },\n  },\n});\n\nexport const { setMetrics } = metricsSlice.actions;\n\n// New action creator for updating metrics based on workers data\nexport const updateMetrics = (workers) => (dispatch) => {\n  const metrics = calculateMetrics(workers);\n  dispatch(setMetrics(metrics));\n};\n\nexport default metricsSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,gBAAgB,GAAIC,OAAO,IAAK;EACpC,IAAIC,eAAe,GAAGD,OAAO,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAG,GAAGC,MAAM,CAACC,UAAU,EAAE,CAAC,CAAC;EACjF,IAAIC,iBAAiB,GAAGL,eAAe,GAAGD,OAAO,CAACO,MAAM,IAAI,CAAC;EAE7D,IAAIC,QAAQ,GAAGR,OAAO,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAG,GAAGC,MAAM,CAACK,YAAY,EAAE,CAAC,CAAC;EAC5E,IAAIC,UAAU,GAAGF,QAAQ,GAAGR,OAAO,CAACO,MAAM,IAAI,CAAC;EAE/C,IAAII,WAAW,GAAGX,OAAO,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAG,GAAGC,MAAM,CAACQ,MAAM,EAAE,CAAC,CAAC;EACzE,IAAIC,aAAa,GAAGF,WAAW,GAAGX,OAAO,CAACO,MAAM,IAAI,CAAC;EAErD,IAAIO,UAAU,GAAGd,OAAO,CAACe,GAAG,CAACX,MAAM,IAAIA,MAAM,CAACK,YAAY,IAAIL,MAAM,CAACQ,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EACvF,IAAII,QAAQ,GAAGF,UAAU,CAACZ,MAAM,CAAC,CAACC,GAAG,EAAEc,KAAK,KAAKd,GAAG,GAAGc,KAAK,EAAE,CAAC,CAAC;EAEhE,OAAO;IACLC,aAAa,EAAEF,QAAQ;IACvBG,iBAAiB,EAAEb,iBAAiB;IACpCc,UAAU,EAAEV,UAAU;IACtBW,aAAa,EAAER,aAAa;IAC5BS,SAAS,EAAEtB,OAAO,CAACO;EACrB,CAAC;AACH,CAAC;AAED,MAAMgB,YAAY,GAAGzB,WAAW,CAAC;EAC/B0B,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZP,aAAa,EAAE,CAAC;IAChBC,iBAAiB,EAAE,CAAC;IACpBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,CAAC;IAChBC,SAAS,EAAE;EACb,CAAC;EACDI,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7B,OAAOA,MAAM,CAACC,OAAO;IACvB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH;AAAW,CAAC,GAAGJ,YAAY,CAACQ,OAAO;;AAElD;AACA,OAAO,MAAMC,aAAa,GAAIhC,OAAO,IAAMiC,QAAQ,IAAK;EACtD,MAAMC,OAAO,GAAGnC,gBAAgB,CAACC,OAAO,CAAC;EACzCiC,QAAQ,CAACN,UAAU,CAACO,OAAO,CAAC,CAAC;AAC/B,CAAC;AAED,eAAeX,YAAY,CAACY,OAAO"},"metadata":{},"sourceType":"module"}