{"ast":null,"code":"// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// // Async thunk action for adding a worker\n// export const addWorker = createAsyncThunk(\n//   'add_associate',\n//   async (workerData, { rejectWithValue }) => {\n//     console.log('dispatching data',workerData)\n//     try {\n//       const response = await fetch('/add_associate', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(workerData),\n//       });\n//       if (!response.ok) throw new Error('Server error!');\n//       return await response.json();\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\n// const workersSlice = createSlice({\n//   name: 'workers',\n//   initialState: [],\n//   reducers: {\n//     // Reducer to set workers\n//     setWorkers: (state, action) => action.payload,\n//     // Reducer to delete a worker\n//     deleteWorker: (state, action) => state.filter((worker) => worker.id !== action.payload),\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(addWorker.fulfilled, (state, action) => {\n//         // Add the new worker to the state\n//         state.push(action.payload);\n//       })\n//       .addCase(addWorker.rejected, (state, action) => {\n//         // Handle the case where adding a worker fails\n//         console.error('Failed to add worker:', action.payload);\n//       });\n//   },\n// });\n\n// export const { setWorkers, deleteWorker } = workersSlice.actions;\n// export default workersSlice.reducer;","map":{"version":3,"names":[],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/workersSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// // Async thunk action for adding a worker\n// export const addWorker = createAsyncThunk(\n//   'add_associate',\n//   async (workerData, { rejectWithValue }) => {\n//     console.log('dispatching data',workerData)\n//     try {\n//       const response = await fetch('/add_associate', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(workerData),\n//       });\n//       if (!response.ok) throw new Error('Server error!');\n//       return await response.json();\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\n// const workersSlice = createSlice({\n//   name: 'workers',\n//   initialState: [],\n//   reducers: {\n//     // Reducer to set workers\n//     setWorkers: (state, action) => action.payload,\n//     // Reducer to delete a worker\n//     deleteWorker: (state, action) => state.filter((worker) => worker.id !== action.payload),\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(addWorker.fulfilled, (state, action) => {\n//         // Add the new worker to the state\n//         state.push(action.payload);\n//       })\n//       .addCase(addWorker.rejected, (state, action) => {\n//         // Handle the case where adding a worker fails\n//         console.error('Failed to add worker:', action.payload);\n//       });\n//   },\n// });\n\n// export const { setWorkers, deleteWorker } = workersSlice.actions;\n// export default workersSlice.reducer;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module"}