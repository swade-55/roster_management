{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ExecutiveSummary.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExecutiveSummary() {\n  _s();\n  const workers = useSelector(state => state.workers.workers);\n\n  // Group workers by department and then by job class\n  const workersByDepartmentAndJobClass = workers.reduce((acc, worker) => {\n    const deptName = worker.department.name;\n    const jobClassName = worker.jobclass.name;\n    if (!acc[deptName]) {\n      acc[deptName] = {};\n    }\n    if (!acc[deptName][jobClassName]) {\n      acc[deptName][jobClassName] = [];\n    }\n    acc[deptName][jobClassName].push(worker);\n    return acc;\n  }, {});\n\n  // Calculate average uptime, attendance, and specific metric based on job class\n  const calculateAverages = (workers, jobClass) => {\n    if (workers.length === 0) return {\n      averageUptime: 0,\n      averageAttendance: 0,\n      specificMetric: 0\n    };\n    const totals = workers.reduce((totals, worker) => {\n      totals.uptime += worker.metrics.Uptime || 0;\n      totals.attendance += worker.metrics.Attendance || 0;\n      totals.specificMetric += jobclass_id === \"Selectors\" ? worker.metrics.CasesPerHour || 0 : worker.metrics.PalletsPerHour || 0;\n      return totals;\n    }, {\n      uptime: 0,\n      attendance: 0,\n      specificMetric: 0\n    });\n    return {\n      averageUptime: totals.uptime / workers.length,\n      averageAttendance: totals.attendance / workers.length,\n      specificMetric: totals.specificMetric / workers.length\n    };\n  };\n  const getAveragesByDepartmentAndJobClass = () => {\n    return Object.entries(workersByDepartmentAndJobClass).map(_ref => {\n      let [department, jobClasses] = _ref;\n      return {\n        department,\n        jobClasses: Object.entries(jobClasses).map(_ref2 => {\n          let [jobClass, workers] = _ref2;\n          const {\n            averageUptime,\n            averageAttendance,\n            specificMetric\n          } = calculateAverages(workers, jobClass);\n          return {\n            jobClass,\n            averageUptime,\n            averageAttendance,\n            specificMetric\n          };\n        })\n      };\n    });\n  };\n  const averagesData = getAveragesByDepartmentAndJobClass();\n\n  // Function to round numbers to two decimal places\n  const formatNumber = num => Math.round(num * 100) / 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Capacity Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Averages by Department and Job Class\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), averagesData.map(_ref3 => {\n      let {\n        department,\n        jobClasses\n      } = _ref3;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: department\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"ui celled table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Job Class\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Average Uptime (%)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Average Attendance (%)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Specific Metric (CPH/PPH)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jobClasses.map(_ref4 => {\n              let {\n                jobClass,\n                averageUptime,\n                averageAttendance,\n                specificMetric\n              } = _ref4;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jobClass\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [formatNumber(averageUptime), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [formatNumber(averageAttendance), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [formatNumber(specificMetric), \" \", jobClass === \"Selectors\" ? \"CPH\" : \"PPH\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 19\n                }, this)]\n              }, jobClass, true, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, department, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(ExecutiveSummary, \"gT0c/2LPjxcQwtHXsMj1ct2k/oM=\", false, function () {\n  return [useSelector];\n});\n_c = ExecutiveSummary;\nexport default ExecutiveSummary;\nvar _c;\n$RefreshReg$(_c, \"ExecutiveSummary\");","map":{"version":3,"names":["React","useSelector","jsxDEV","_jsxDEV","ExecutiveSummary","_s","workers","state","workersByDepartmentAndJobClass","reduce","acc","worker","deptName","department","name","jobClassName","jobclass","push","calculateAverages","jobClass","length","averageUptime","averageAttendance","specificMetric","totals","uptime","metrics","Uptime","attendance","Attendance","jobclass_id","CasesPerHour","PalletsPerHour","getAveragesByDepartmentAndJobClass","Object","entries","map","_ref","jobClasses","_ref2","averagesData","formatNumber","num","Math","round","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_ref3","_ref4","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ExecutiveSummary.js"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n\nfunction ExecutiveSummary() {\n  const workers = useSelector(state => state.workers.workers);\n\n  // Group workers by department and then by job class\n  const workersByDepartmentAndJobClass = workers.reduce((acc, worker) => {\n    const deptName = worker.department.name;\n    const jobClassName = worker.jobclass.name;\n\n    if (!acc[deptName]) {\n      acc[deptName] = {};\n    }\n    if (!acc[deptName][jobClassName]) {\n      acc[deptName][jobClassName] = [];\n    }\n\n    acc[deptName][jobClassName].push(worker);\n    return acc;\n  }, {});\n\n  // Calculate average uptime, attendance, and specific metric based on job class\n  const calculateAverages = (workers, jobClass) => {\n    if (workers.length === 0) return { averageUptime: 0, averageAttendance: 0, specificMetric: 0 };\n\n    const totals = workers.reduce((totals, worker) => {\n      totals.uptime += worker.metrics.Uptime || 0;\n      totals.attendance += worker.metrics.Attendance || 0;\n      totals.specificMetric += jobclass_id === \"Selectors\" ? worker.metrics.CasesPerHour || 0 : worker.metrics.PalletsPerHour || 0;\n      return totals;\n    }, { uptime: 0, attendance: 0, specificMetric: 0 });\n\n    return {\n      averageUptime: totals.uptime / workers.length,\n      averageAttendance: totals.attendance / workers.length,\n      specificMetric: totals.specificMetric / workers.length\n    };\n  };\n\n  const getAveragesByDepartmentAndJobClass = () => {\n    return Object.entries(workersByDepartmentAndJobClass).map(([department, jobClasses]) => ({\n      department,\n      jobClasses: Object.entries(jobClasses).map(([jobClass, workers]) => {\n        const { averageUptime, averageAttendance, specificMetric } = calculateAverages(workers, jobClass);\n        return {\n          jobClass,\n          averageUptime,\n          averageAttendance,\n          specificMetric\n        };\n      })\n    }));\n  };\n\n  const averagesData = getAveragesByDepartmentAndJobClass();\n\n  // Function to round numbers to two decimal places\n  const formatNumber = (num) => Math.round(num * 100) / 100;\n\n  return (\n    <div className=\"header-container\">\n      <h1>Capacity Planner</h1>\n      \n      {/* New Section for Metrics by Department and Job Class */}\n      <h2>Averages by Department and Job Class</h2>\n      {averagesData.map(({ department, jobClasses }) => (\n        <div key={department}>\n          <h3>{department}</h3>\n          <table className=\"ui celled table\">\n            <thead>\n              <tr>\n                <th>Job Class</th>\n                <th>Average Uptime (%)</th>\n                <th>Average Attendance (%)</th>\n                <th>Specific Metric (CPH/PPH)</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jobClasses.map(({ jobClass, averageUptime, averageAttendance, specificMetric }) => (\n                <tr key={jobClass}>\n                  <td>{jobClass}</td>\n                  <td>{formatNumber(averageUptime)}%</td>\n                  <td>{formatNumber(averageAttendance)}%</td>\n                  <td>{formatNumber(specificMetric)} {jobClass === \"Selectors\" ? \"CPH\" : \"PPH\"}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ExecutiveSummary;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}