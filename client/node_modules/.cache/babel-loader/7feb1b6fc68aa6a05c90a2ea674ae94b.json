{"ast":null,"code":"// import React,{useState} from 'react';\n// import { Formik, Form, useField } from 'formik';\n// import { useDispatch} from 'react-redux';\n// import { addWorker,fetchWorkers } from '../features/workersSlice';\n// import * as Yup from 'yup';\n\n// // Define the MySelect component\n// const MySelect = ({ label, ...props }) => {\n//   const [field, meta] = useField(props);\n//   return (\n//     <>\n//       <label htmlFor={props.id || props.name}>{label}</label>\n//       <select {...field} {...props} />\n//       {meta.touched && meta.error ? <div className=\"error\">{meta.error}</div> : null}\n//     </>\n//   );\n// };\n\n// // Define the jobClasses array\n// const jobClasses = [\n//   { id: 1, name: 'Putaway Forklift' },\n//   { id: 2, name: 'Selector' },\n//   { id: 3, name: 'Loader' },\n//   { id: 4, name: 'Receiver' },\n//   { id: 5, name: 'Letdown Forklift' },\n//   // ... other job classes ...\n// ];\n\n// // Custom Input component for Formik\n// const MyTextInput = ({ label, ...props }) => {\n//   const [field] = useField(props);\n//   return (\n//     <>\n//       <label htmlFor={props.id || props.name}>{label}</label>\n//       <input {...field} {...props} />\n//     </>\n//   );\n// };\n\n// function AssociateForm() {\n//   const dispatch = useDispatch();\n//   const [selectedJobClass,setSelectedJobClass] = useState('')\n//   const validationSchema = Yup.object({\n//     firstName: Yup.string().required('First name is required'),\n//     lastName: Yup.string().required('Last name is required'),\n//     jobClass_id: Yup.string().required('Job class is required'),\n//     uptime: Yup.string().required('Uptime is required'),\n//     casesPerHour: Yup.string().required('Cases per hour is required'),\n//     palletsPerHour: Yup.string().required('Pallets per hour is required'),\n//     attendance: Yup.string().required('Attendance is required'),\n//   });\n\n//   const handleJobClassChange = (setFieldValue,value) =>{\n//     setFieldValue(\"jobClass_id\",value);\n//     setSelectedJobClass(value);\n//   }\n\n//   // Initial values for the form\n//   const initialValues = {\n//     firstName: '',\n//     lastName: '',\n//     jobClass_id: '', \n//     uptime: '', \n//     casesPerHour: '',\n//     palletsPerHour: '',\n//     attendance: '',\n//   };\n\n//   // onSubmit function with Redux dispatch\n//   const onSubmit = (values, { setSubmitting, resetForm }) => {\n//     // Prepare the metrics object\n//     const metrics = {\n//       uptime: values.uptime,\n//       casesPerHour: values.casesPerHour,\n//       palletsPerHour: values.palletsPerHour,\n//       attendance: values.attendance\n//     };\n\n//     // Remove any empty metric entries\n//     Object.keys(metrics).forEach(key => metrics[key] === '' && delete metrics[key]);\n\n//     // Create the payload to send to the server\n//     const payload = {\n//       firstName: values.firstName,\n//       lastName: values.lastName,\n//       jobClass_id: parseInt(values.jobClass_id, 10), \n//       metrics: metrics\n//     };\n\n//     console.log('Attempting to submit form with values:', payload);\n\n//     // Dispatching the action with form data\n//     dispatch(addWorker(payload))\n//       .unwrap()\n//       .then(addedWorker => {\n//         console.log('Form submission successful, added worker:', addedWorker);\n//         dispatch(fetchWorkers())\n//         resetForm();\n//       })\n//       .catch(error => {\n//         console.error('Form submission error:', error);\n//       })\n//       .finally(() => {\n//         setSubmitting(false);\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <h3>Add an Associate!</h3>\n//       <Formik\n//         initialValues={initialValues}\n//         validationSchema={validationSchema}\n//         onSubmit={onSubmit}\n//       >\n//         {({ isSubmitting, setFieldValue, values, handleSubmit }) => (\n//           <Form onSubmit={handleSubmit}>\n//             <MySelect label=\"Job Class\" name=\"jobClass_id\" onChange={(e) => handleJobClassChange(setFieldValue, e.target.value)}>\n//               <option value=\"\">Select a Job Class</option>\n//               {jobClasses.map(jobClass => (\n//                 <option key={jobClass.id} value={jobClass.id}> {/* Change this line */}\n//                   {jobClass.name}\n//                 </option>\n//               ))}\n//             </MySelect>\n\n//             {selectedJobClass === '1' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Pallets Per Hour\" name=\"palletsPerHour\" type=\"text\" />\n//               </>\n//             )}\n//             {selectedJobClass === '2' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Cases Per Hour\" name=\"casesPerHour\" type=\"text\" />\n//               </>\n//             )}\n//             {selectedJobClass === '3' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Pallets Per Hour\" name=\"palletsPerHour\" type=\"text\" />\n//               </>\n//             )}\n//             {selectedJobClass === '4' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Pallets Per Hour\" name=\"palletsPerHour\" type=\"text\" />\n//               </>\n//             )}\n//             {selectedJobClass === '5' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Pallets Per Hour\" name=\"palletsPerHour\" type=\"text\" />\n//               </>\n//             )}\n\n//             {/* Conditional rendering for other job classes can be added here */}\n\n//             <button type=\"submit\" disabled={isSubmitting}>\n//               Submit\n//             </button>\n//           </Form>\n//         )}\n//       </Formik>\n//     </div>\n//   );\n// }\n\n// export default AssociateForm;","map":{"version":3,"names":[],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociateForm.js"],"sourcesContent":["// import React,{useState} from 'react';\n// import { Formik, Form, useField } from 'formik';\n// import { useDispatch} from 'react-redux';\n// import { addWorker,fetchWorkers } from '../features/workersSlice';\n// import * as Yup from 'yup';\n\n\n\n\n// // Define the MySelect component\n// const MySelect = ({ label, ...props }) => {\n//   const [field, meta] = useField(props);\n//   return (\n//     <>\n//       <label htmlFor={props.id || props.name}>{label}</label>\n//       <select {...field} {...props} />\n//       {meta.touched && meta.error ? <div className=\"error\">{meta.error}</div> : null}\n//     </>\n//   );\n// };\n\n// // Define the jobClasses array\n// const jobClasses = [\n//   { id: 1, name: 'Putaway Forklift' },\n//   { id: 2, name: 'Selector' },\n//   { id: 3, name: 'Loader' },\n//   { id: 4, name: 'Receiver' },\n//   { id: 5, name: 'Letdown Forklift' },\n//   // ... other job classes ...\n// ];\n\n// // Custom Input component for Formik\n// const MyTextInput = ({ label, ...props }) => {\n//   const [field] = useField(props);\n//   return (\n//     <>\n//       <label htmlFor={props.id || props.name}>{label}</label>\n//       <input {...field} {...props} />\n//     </>\n//   );\n// };\n\n// function AssociateForm() {\n//   const dispatch = useDispatch();\n//   const [selectedJobClass,setSelectedJobClass] = useState('')\n//   const validationSchema = Yup.object({\n//     firstName: Yup.string().required('First name is required'),\n//     lastName: Yup.string().required('Last name is required'),\n//     jobClass_id: Yup.string().required('Job class is required'),\n//     uptime: Yup.string().required('Uptime is required'),\n//     casesPerHour: Yup.string().required('Cases per hour is required'),\n//     palletsPerHour: Yup.string().required('Pallets per hour is required'),\n//     attendance: Yup.string().required('Attendance is required'),\n//   });\n  \n\n//   const handleJobClassChange = (setFieldValue,value) =>{\n//     setFieldValue(\"jobClass_id\",value);\n//     setSelectedJobClass(value);\n//   }\n\n//   // Initial values for the form\n//   const initialValues = {\n//     firstName: '',\n//     lastName: '',\n//     jobClass_id: '', \n//     uptime: '', \n//     casesPerHour: '',\n//     palletsPerHour: '',\n//     attendance: '',\n//   };\n  \n\n//   // onSubmit function with Redux dispatch\n//   const onSubmit = (values, { setSubmitting, resetForm }) => {\n//     // Prepare the metrics object\n//     const metrics = {\n//       uptime: values.uptime,\n//       casesPerHour: values.casesPerHour,\n//       palletsPerHour: values.palletsPerHour,\n//       attendance: values.attendance\n//     };\n\n//     // Remove any empty metric entries\n//     Object.keys(metrics).forEach(key => metrics[key] === '' && delete metrics[key]);\n\n//     // Create the payload to send to the server\n//     const payload = {\n//       firstName: values.firstName,\n//       lastName: values.lastName,\n//       jobClass_id: parseInt(values.jobClass_id, 10), \n//       metrics: metrics\n//     };\n\n//     console.log('Attempting to submit form with values:', payload);\n    \n//     // Dispatching the action with form data\n//     dispatch(addWorker(payload))\n//       .unwrap()\n//       .then(addedWorker => {\n//         console.log('Form submission successful, added worker:', addedWorker);\n//         dispatch(fetchWorkers())\n//         resetForm();\n//       })\n//       .catch(error => {\n//         console.error('Form submission error:', error);\n//       })\n//       .finally(() => {\n//         setSubmitting(false);\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <h3>Add an Associate!</h3>\n//       <Formik\n//         initialValues={initialValues}\n//         validationSchema={validationSchema}\n//         onSubmit={onSubmit}\n//       >\n//         {({ isSubmitting, setFieldValue, values, handleSubmit }) => (\n//           <Form onSubmit={handleSubmit}>\n//             <MySelect label=\"Job Class\" name=\"jobClass_id\" onChange={(e) => handleJobClassChange(setFieldValue, e.target.value)}>\n//               <option value=\"\">Select a Job Class</option>\n//               {jobClasses.map(jobClass => (\n//                 <option key={jobClass.id} value={jobClass.id}> {/* Change this line */}\n//                   {jobClass.name}\n//                 </option>\n//               ))}\n//             </MySelect>\n\n\n//             {selectedJobClass === '1' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Pallets Per Hour\" name=\"palletsPerHour\" type=\"text\" />\n//               </>\n//             )}\n//             {selectedJobClass === '2' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Cases Per Hour\" name=\"casesPerHour\" type=\"text\" />\n//               </>\n//             )}\n//             {selectedJobClass === '3' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Pallets Per Hour\" name=\"palletsPerHour\" type=\"text\" />\n//               </>\n//             )}\n//             {selectedJobClass === '4' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Pallets Per Hour\" name=\"palletsPerHour\" type=\"text\" />\n//               </>\n//             )}\n//             {selectedJobClass === '5' && (\n//               <>\n//                 <MyTextInput label=\"First Name\" name=\"firstName\" type=\"text\" />\n//                 <MyTextInput label=\"Last Name\" name=\"lastName\" type=\"text\" />\n//                 <MyTextInput label=\"Uptime\" name=\"uptime\" type=\"text\" />\n//                 <MyTextInput label=\"Attendance\" name=\"attendance\" type=\"text\" />\n//                 <MyTextInput label=\"Pallets Per Hour\" name=\"palletsPerHour\" type=\"text\" />\n//               </>\n//             )}\n            \n//             {/* Conditional rendering for other job classes can be added here */}\n            \n//             <button type=\"submit\" disabled={isSubmitting}>\n//               Submit\n//             </button>\n//           </Form>\n//         )}\n//       </Formik>\n//     </div>\n//   );\n// }\n\n// export default AssociateForm;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}