{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Define the initial state with additional properties\nconst initialState = {\n  workers: [],\n  totalCapacity: 0,\n  averageAttendance: 0,\n  averageCPH: 0,\n  averageUptime: 0,\n  headCount: 0,\n  status: 'idle',\n  // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\n\n// Async thunk to fetch metrics\nexport const fetchMetrics = createAsyncThunk('metrics/fetchMetrics', async () => {\n  console.log('Fetching metrics...');\n  const response = await fetch('http://localhost:5555/associate_metrics');\n  const data = await response.json();\n  console.log('Metrics fetched:', data);\n  return data;\n});\n\n// Extract and calculate metrics from worker data\nconst calculateMetrics = workers => {\n  console.log('Calculating metrics for workers:', workers);\n  let transformedWorkers = workers.map(worker => {\n    var _worker$metrics$find, _worker$metrics$find2, _worker$metrics$find3;\n    return {\n      attendance: ((_worker$metrics$find = worker.metrics.find(m => m.metric_name === 'Attendance')) === null || _worker$metrics$find === void 0 ? void 0 : _worker$metrics$find.value) || 0,\n      casesPerHour: ((_worker$metrics$find2 = worker.metrics.find(m => m.metric_name === 'Pallets PerHour')) === null || _worker$metrics$find2 === void 0 ? void 0 : _worker$metrics$find2.value) || 0,\n      uptime: ((_worker$metrics$find3 = worker.metrics.find(m => m.metric_name === 'uptime')) === null || _worker$metrics$find3 === void 0 ? void 0 : _worker$metrics$find3.value) || 0\n    };\n  });\n  return {\n    totalCapacity: 0,\n    // Calculate totalCapacity based on your business logic\n    averageAttendance: transformedWorkers.reduce((sum, w) => sum + Number(w.attendance), 0) / (transformedWorkers.length || 1),\n    averageCPH: transformedWorkers.reduce((sum, w) => sum + Number(w.casesPerHour), 0) / (transformedWorkers.length || 1),\n    averageUptime: transformedWorkers.reduce((sum, w) => sum + Number(w.uptime), 0) / (transformedWorkers.length || 1),\n    headCount: workers.length\n  };\n};\nconst metricsSlice = createSlice({\n  name: 'metrics',\n  initialState,\n  reducers: {\n    // Reducer to manually set metrics\n    setMetrics: (state, action) => {\n      return {\n        ...state,\n        ...action.payload\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchMetrics.pending, (state, action) => {\n      console.log('Fetch metrics pending...');\n      state.status = 'loading';\n    }).addCase(fetchMetrics.fulfilled, (state, action) => {\n      console.log('Fetch metrics fulfilled with payload:', action.payload);\n      state.status = 'succeeded';\n      state.workers = action.payload;\n      if (!Array.isArray(action.payload)) {\n        state.error = 'Data received is not an array';\n        return;\n      }\n      const newMetrics = calculateMetrics(action.payload);\n      state.totalCapacity = newMetrics.totalCapacity;\n      state.averageAttendance = newMetrics.averageAttendance;\n      state.averageCPH = newMetrics.averageCPH;\n      state.averageUptime = newMetrics.averageUptime;\n      state.headCount = newMetrics.headCount;\n    }).addCase(fetchMetrics.rejected, (state, action) => {\n      console.log('Fetch metrics failed with error:', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  setMetrics\n} = metricsSlice.actions;\nexport const updateMetrics = workers => dispatch => {\n  const metrics = calculateMetrics(workers);\n  dispatch(setMetrics(metrics));\n};\nexport default metricsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","workers","totalCapacity","averageAttendance","averageCPH","averageUptime","headCount","status","error","fetchMetrics","console","log","response","fetch","data","json","calculateMetrics","transformedWorkers","map","worker","_worker$metrics$find","_worker$metrics$find2","_worker$metrics$find3","attendance","metrics","find","m","metric_name","value","casesPerHour","uptime","reduce","sum","w","Number","length","metricsSlice","name","reducers","setMetrics","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","Array","isArray","newMetrics","rejected","message","actions","updateMetrics","dispatch","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/metricsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Define the initial state with additional properties\nconst initialState = {\n  workers: [],\n  totalCapacity: 0,\n  averageAttendance: 0,\n  averageCPH: 0,\n  averageUptime: 0,\n  headCount: 0,\n  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\n\n// Async thunk to fetch metrics\nexport const fetchMetrics = createAsyncThunk('metrics/fetchMetrics', async () => {\n  console.log('Fetching metrics...');\n  const response = await fetch('http://localhost:5555/associate_metrics');\n  const data = await response.json();\n  console.log('Metrics fetched:', data);\n  return data;\n});\n\n// Extract and calculate metrics from worker data\nconst calculateMetrics = (workers) => {\n  console.log('Calculating metrics for workers:', workers);\n  let transformedWorkers = workers.map(worker => ({\n    attendance: worker.metrics.find(m => m.metric_name === 'Attendance')?.value || 0,\n    casesPerHour: worker.metrics.find(m => m.metric_name === 'Pallets PerHour')?.value || 0,\n    uptime: worker.metrics.find(m => m.metric_name === 'uptime')?.value || 0,\n  }));\n\n\n\n\n  return {\n    totalCapacity: 0, // Calculate totalCapacity based on your business logic\n    averageAttendance: transformedWorkers.reduce((sum, w) => sum + Number(w.attendance), 0) / (transformedWorkers.length || 1),\n    averageCPH: transformedWorkers.reduce((sum, w) => sum + Number(w.casesPerHour), 0) / (transformedWorkers.length || 1),\n    averageUptime: transformedWorkers.reduce((sum, w) => sum + Number(w.uptime), 0) / (transformedWorkers.length || 1),\n    headCount: workers.length,\n  };\n};\n\nconst metricsSlice = createSlice({\n  name: 'metrics',\n  initialState,\n  reducers: {\n    // Reducer to manually set metrics\n    setMetrics: (state, action) => {\n      return { ...state, ...action.payload };\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchMetrics.pending, (state, action) => {\n        console.log('Fetch metrics pending...');\n        state.status = 'loading';\n      })\n\n      .addCase(fetchMetrics.fulfilled, (state, action) => {\n        console.log('Fetch metrics fulfilled with payload:', action.payload);\n        state.status = 'succeeded';\n        state.workers = action.payload;\n        if (!Array.isArray(action.payload)) {\n          state.error = 'Data received is not an array';\n          return;\n        }\n        const newMetrics = calculateMetrics(action.payload);\n        state.totalCapacity = newMetrics.totalCapacity;\n        state.averageAttendance = newMetrics.averageAttendance;\n        state.averageCPH = newMetrics.averageCPH;\n        state.averageUptime = newMetrics.averageUptime;\n        state.headCount = newMetrics.headCount;\n      })\n      .addCase(fetchMetrics.rejected, (state, action) => {\n        console.log('Fetch metrics failed with error:', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  }\n});\n\n\nexport const { setMetrics } = metricsSlice.actions;\n\nexport const updateMetrics = (workers) => (dispatch) => {\n  const metrics = calculateMetrics(workers);\n  dispatch(setMetrics(metrics));\n};\n\n\nexport default metricsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}