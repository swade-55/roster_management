{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ExecutiveSummary.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExecutiveSummary() {\n  _s();\n  const workers = useSelector(state => state.workers.workers);\n\n  // Group workers by department and then by job class, including jobClassId\n  const workersByDepartmentAndJobClass = workers.reduce((acc, worker) => {\n    const deptName = worker.department.name;\n    const jobClassKey = `${worker.jobclass.name}-${worker.jobclass.id}`; // Unique key for job class including ID\n\n    if (!acc[deptName]) {\n      acc[deptName] = {};\n    }\n    if (!acc[deptName][jobClassKey]) {\n      acc[deptName][jobClassKey] = {\n        workers: [],\n        jobClassId: worker.jobclass.id,\n        // Store jobClassId for later reference\n        jobClassName: worker.jobclass.name // Store jobClassName for display\n      };\n    }\n\n    acc[deptName][jobClassKey].workers.push(worker);\n    return acc;\n  }, {});\n\n  // Calculate average uptime, attendance, and specific metric based on job class ID\n  const calculateAverages = (workers, jobClassId) => {\n    if (workers.length === 0) return {\n      averageUptime: 0,\n      averageAttendance: 0,\n      specificMetric: 0\n    };\n    const totals = workers.reduce((totals, worker) => {\n      totals.uptime += worker.metrics.Uptime || 0;\n      totals.attendance += worker.metrics.Attendance || 0;\n      // Use jobClassId to determine which metric to use\n      totals.specificMetric += jobClassId === 2 || jobClassId === 4 ? worker.metrics.CasesPerHour || 0 : worker.metrics.PalletsPerHour || 0;\n      return totals;\n    }, {\n      uptime: 0,\n      attendance: 0,\n      specificMetric: 0\n    });\n    return {\n      averageUptime: totals.uptime / workers.length,\n      averageAttendance: totals.attendance / workers.length,\n      specificMetric: totals.specificMetric / workers.length\n    };\n  };\n  const getAveragesByDepartmentAndJobClass = () => {\n    return Object.entries(workersByDepartmentAndJobClass).map(_ref => {\n      let [department, jobClasses] = _ref;\n      return {\n        department,\n        jobClasses: Object.entries(jobClasses).map(_ref2 => {\n          let [jobClassKey, {\n            workers,\n            jobClassId,\n            jobClassName\n          }] = _ref2;\n          const {\n            averageUptime,\n            averageAttendance,\n            specificMetric\n          } = calculateAverages(workers, jobClassId);\n          return {\n            jobClassName,\n            jobClassId,\n            averageUptime,\n            averageAttendance,\n            specificMetric\n          };\n        })\n      };\n    });\n  };\n  const averagesData = getAveragesByDepartmentAndJobClass();\n\n  // Function to round numbers to two decimal places\n  const formatNumber = num => Math.round(num * 100) / 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-5\",\n      children: \"Capacity Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold mb-4\",\n      children: \"Averages by Department and Job Class\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), averagesData.map(_ref3 => {\n      let {\n        department,\n        jobClasses\n      } = _ref3;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-semibold mb-3\",\n          children: department\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table w-full\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Job Class\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Average Uptime (%)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Average Attendance (%)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Specific Metric (CPH/PPH)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: jobClasses.map(_ref4 => {\n                let {\n                  jobClassName,\n                  averageUptime,\n                  averageAttendance,\n                  specificMetric,\n                  jobClassId\n                } = _ref4;\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: jobClassName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 89,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [formatNumber(averageUptime), \"%\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [formatNumber(averageAttendance), \"%\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [formatNumber(specificMetric), \" \", jobClassId === 2 || jobClassId === 4 ? \"CPH\" : \"PPH\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 21\n                  }, this)]\n                }, jobClassName, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, department, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(ExecutiveSummary, \"gT0c/2LPjxcQwtHXsMj1ct2k/oM=\", false, function () {\n  return [useSelector];\n});\n_c = ExecutiveSummary;\nexport default ExecutiveSummary;\nvar _c;\n$RefreshReg$(_c, \"ExecutiveSummary\");","map":{"version":3,"names":["React","useSelector","jsxDEV","_jsxDEV","ExecutiveSummary","_s","workers","state","workersByDepartmentAndJobClass","reduce","acc","worker","deptName","department","name","jobClassKey","jobclass","id","jobClassId","jobClassName","push","calculateAverages","length","averageUptime","averageAttendance","specificMetric","totals","uptime","metrics","Uptime","attendance","Attendance","CasesPerHour","PalletsPerHour","getAveragesByDepartmentAndJobClass","Object","entries","map","_ref","jobClasses","_ref2","averagesData","formatNumber","num","Math","round","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_ref3","_ref4","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ExecutiveSummary.js"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n\nfunction ExecutiveSummary() {\n  const workers = useSelector(state => state.workers.workers);\n\n  // Group workers by department and then by job class, including jobClassId\n  const workersByDepartmentAndJobClass = workers.reduce((acc, worker) => {\n    const deptName = worker.department.name;\n    const jobClassKey = `${worker.jobclass.name}-${worker.jobclass.id}`; // Unique key for job class including ID\n\n    if (!acc[deptName]) {\n      acc[deptName] = {};\n    }\n    if (!acc[deptName][jobClassKey]) {\n      acc[deptName][jobClassKey] = {\n        workers: [],\n        jobClassId: worker.jobclass.id, // Store jobClassId for later reference\n        jobClassName: worker.jobclass.name // Store jobClassName for display\n      };\n    }\n\n    acc[deptName][jobClassKey].workers.push(worker);\n    return acc;\n  }, {});\n\n  // Calculate average uptime, attendance, and specific metric based on job class ID\n  const calculateAverages = (workers, jobClassId) => {\n    if (workers.length === 0) return { averageUptime: 0, averageAttendance: 0, specificMetric: 0 };\n\n    const totals = workers.reduce((totals, worker) => {\n      totals.uptime += worker.metrics.Uptime || 0;\n      totals.attendance += worker.metrics.Attendance || 0;\n      // Use jobClassId to determine which metric to use\n      totals.specificMetric += (jobClassId === 2 || jobClassId === 4)? worker.metrics.CasesPerHour || 0 : worker.metrics.PalletsPerHour || 0;\n      return totals;\n    }, { uptime: 0, attendance: 0, specificMetric: 0 });\n\n    return {\n      averageUptime: totals.uptime / workers.length,\n      averageAttendance: totals.attendance / workers.length,\n      specificMetric: totals.specificMetric / workers.length\n    };\n  };\n\n  const getAveragesByDepartmentAndJobClass = () => {\n    return Object.entries(workersByDepartmentAndJobClass).map(([department, jobClasses]) => ({\n      department,\n      jobClasses: Object.entries(jobClasses).map(([jobClassKey, { workers, jobClassId, jobClassName }]) => {\n        const { averageUptime, averageAttendance, specificMetric } = calculateAverages(workers, jobClassId);\n        return {\n          jobClassName,\n          jobClassId,\n          averageUptime,\n          averageAttendance,\n          specificMetric\n        };\n      })\n    }));\n  };\n\n  const averagesData = getAveragesByDepartmentAndJobClass();\n\n  // Function to round numbers to two decimal places\n  const formatNumber = (num) => Math.round(num * 100) / 100;\n\n  return (\n    <div className=\"p-5\">\n      <h1 className=\"text-3xl font-bold mb-5\">Capacity Planner</h1>\n\n      <h2 className=\"text-2xl font-semibold mb-4\">Averages by Department and Job Class</h2>\n      {averagesData.map(({ department, jobClasses }) => (\n        <div key={department} className=\"mb-5\">\n          <h3 className=\"text-xl font-semibold mb-3\">{department}</h3>\n          {/* DaisyUI Table */}\n          <div className=\"overflow-x-auto\">\n            <table className=\"table w-full\">\n              <thead>\n                <tr>\n                  <th>Job Class</th>\n                  <th>Average Uptime (%)</th>\n                  <th>Average Attendance (%)</th>\n                  <th>Specific Metric (CPH/PPH)</th>\n                </tr>\n              </thead>\n              <tbody>\n                {jobClasses.map(({ jobClassName, averageUptime, averageAttendance, specificMetric, jobClassId }) => (\n                  <tr key={jobClassName}>\n                    <td>{jobClassName}</td>\n                    <td>{formatNumber(averageUptime)}%</td>\n                    <td>{formatNumber(averageAttendance)}%</td>\n                    <td>{formatNumber(specificMetric)} {(jobClassId === 2 || jobClassId === 4) ? \"CPH\" : \"PPH\"}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ExecutiveSummary;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}