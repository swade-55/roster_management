{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase2/phase-4-v2/client/src/components/MasterOperatingPlan.js\",\n  _s = $RefreshSig$();\n// MasterOperatingPlan.js\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setWorkers } from '../features/workersSlice';\nimport { updateMetrics } from '../features/metricsSlice';\nimport AssociateRoster from './AssociateRoster';\nimport Search from './Search';\nimport Header from './Header';\nimport { Container } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MasterOperatingPlan() {\n  _s();\n  const dispatch = useDispatch();\n  const workers = useSelector(state => state.workers);\n  // const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    fetch('http://localhost:3001/workers') // Adjust the path accordingly\n    .then(response => response.json()).then(data => {\n      dispatch(setWorkers(data));\n      dispatch(updateMetrics(data)); // Dispatch the action to update metrics\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [dispatch]);\n\n  // function handleDelete(id) {\n  //   dispatch(deleteWorker(id));\n  //   dispatch(updateMetrics(workers.filter((worker) => worker.id !== id))); // Update metrics after deletion\n  // }\n\n  // let attendanceArray = workers.map(cases=>{\n  //   return cases['attendance']\n  // })\n  // let totalAttendance = attendanceArray.reduce((attendanceSum,b)=>attendanceSum+b,0)\n  // const attendanceAverage = !! parseInt(totalAttendance/attendanceArray.length,10) ? parseInt(totalAttendance/attendanceArray.length,10) : 0\n  // const cphArray = workers.map(cases=>{\n  //   return cases['casesPerHour']\n  // })\n  // let totalCPH = cphArray.reduce((cphSum,a)=>cphSum+a,0)\n  // const cphAverage = !! parseInt(totalCPH/cphArray.length,10) ? parseInt(totalCPH/cphArray.length,10) : 0\n\n  // const uptimeArray = workers.map(cases=>{\n  //   return cases['uptime']\n  // })\n  // let totalUptime = uptimeArray.reduce((uptimeSum,a)=>uptimeSum+a,0)\n  // const uptimeAverage = !! parseInt(totalUptime/uptimeArray.length) ? parseInt(totalUptime/uptimeArray.length) : 0\n  // console.log(uptimeAverage)\n\n  // const casesArray = workers.map(cases=>{\n  //   return cases['casesPerHour']*(cases['uptime']/100)*8\n  // })\n  // const capacity = casesArray.reduce((partialSum, a) => partialSum + a, 0);\n  // const workersToDisplay = workers.filter(worker=>(\n  //   worker.name.toLowerCase().includes(searchTerm.toLowerCase())\n  // ))\n  // const totalHeadcount = casesArray.length\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Capacity Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(AssociateRoster, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(MasterOperatingPlan, \"WRUtdHwDgdXe6uU8CrwZz+sKrWs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = MasterOperatingPlan;\nexport default MasterOperatingPlan;\nvar _c;\n$RefreshReg$(_c, \"MasterOperatingPlan\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","setWorkers","updateMetrics","AssociateRoster","Search","Header","Container","jsxDEV","_jsxDEV","MasterOperatingPlan","_s","dispatch","workers","state","fetch","then","response","json","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase2/phase-4-v2/client/src/components/MasterOperatingPlan.js"],"sourcesContent":["// MasterOperatingPlan.js\nimport React, { useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setWorkers} from '../features/workersSlice';\nimport { updateMetrics } from '../features/metricsSlice';\nimport AssociateRoster from './AssociateRoster';\nimport Search from './Search';\nimport Header from './Header';\nimport { Container } from 'semantic-ui-react';\n\nfunction MasterOperatingPlan() {\n  const dispatch = useDispatch();\n  const workers = useSelector((state) => state.workers);\n  // const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    fetch('http://localhost:3001/workers') // Adjust the path accordingly\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(setWorkers(data));\n        dispatch(updateMetrics(data)); // Dispatch the action to update metrics\n      })\n      .catch((error) => {\n        console.error('Error fetching data:', error);\n      });\n  }, [dispatch]);\n\n  // function handleDelete(id) {\n  //   dispatch(deleteWorker(id));\n  //   dispatch(updateMetrics(workers.filter((worker) => worker.id !== id))); // Update metrics after deletion\n  // }\n\n    // let attendanceArray = workers.map(cases=>{\n    //   return cases['attendance']\n    // })\n    // let totalAttendance = attendanceArray.reduce((attendanceSum,b)=>attendanceSum+b,0)\n    // const attendanceAverage = !! parseInt(totalAttendance/attendanceArray.length,10) ? parseInt(totalAttendance/attendanceArray.length,10) : 0\n    // const cphArray = workers.map(cases=>{\n    //   return cases['casesPerHour']\n    // })\n    // let totalCPH = cphArray.reduce((cphSum,a)=>cphSum+a,0)\n    // const cphAverage = !! parseInt(totalCPH/cphArray.length,10) ? parseInt(totalCPH/cphArray.length,10) : 0\n\n    // const uptimeArray = workers.map(cases=>{\n    //   return cases['uptime']\n    // })\n    // let totalUptime = uptimeArray.reduce((uptimeSum,a)=>uptimeSum+a,0)\n    // const uptimeAverage = !! parseInt(totalUptime/uptimeArray.length) ? parseInt(totalUptime/uptimeArray.length) : 0\n    // console.log(uptimeAverage)\n\n    // const casesArray = workers.map(cases=>{\n    //   return cases['casesPerHour']*(cases['uptime']/100)*8\n    // })\n    // const capacity = casesArray.reduce((partialSum, a) => partialSum + a, 0);\n    // const workersToDisplay = workers.filter(worker=>(\n    //   worker.name.toLowerCase().includes(searchTerm.toLowerCase())\n    // ))\n    // const totalHeadcount = casesArray.length\n    return (\n        <Container>\n          <br/>\n          <Search/>\n          <Header/>\n          <h1>Capacity Planner</h1>\n          <br />\n          <AssociateRoster/>\n        </Container>\n      );\n}\n\nexport default MasterOperatingPlan;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAO,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAO,0BAA0B;AACpD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,OAAO,GAAGb,WAAW,CAAEc,KAAK,IAAKA,KAAK,CAACD,OAAO,CAAC;EACrD;;EAEAd,SAAS,CAAC,MAAM;IACdgB,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAAA,CACpCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdP,QAAQ,CAACV,UAAU,CAACiB,IAAI,CAAC,CAAC;MAC1BP,QAAQ,CAACT,aAAa,CAACgB,IAAI,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;;EAEd;EACA;EACA;EACA;;EAEE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACIH,OAAA,CAACF,SAAS;IAAAgB,QAAA,gBACRd,OAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLlB,OAAA,CAACJ,MAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTlB,OAAA,CAACH,MAAM;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTlB,OAAA;MAAAc,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBlB,OAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNlB,OAAA,CAACL,eAAe;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEpB;AAAChB,EAAA,CA1DQD,mBAAmB;EAAA,QACTT,WAAW,EACZD,WAAW;AAAA;AAAA4B,EAAA,GAFpBlB,mBAAmB;AA4D5B,eAAeA,mBAAmB;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}