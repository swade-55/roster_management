{"ast":null,"code":"// scheduleBuildSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Define an async thunk for fetching the schedule from the Flask API\nexport const fetchSchedule = createAsyncThunk('schedule/fetchSchedule', async (userInput, thunkAPI) => {\n  try {\n    console.log('Making API call to generate schedule with user input:', userInput);\n    const response = await fetch('http://localhost:5555/generate_schedule', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userInput)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    console.log('Received schedule data from API:', data);\n    return data.schedule; // This should be the schedule data returned from your Flask API\n  } catch (error) {\n    console.error('API call to generate schedule failed:', error);\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n// Create the schedule slice\nconst scheduleBuildSlice = createSlice({\n  name: 'schedule',\n  initialState: {\n    data: null,\n    // This will store the schedule data\n    status: 'idle',\n    // 'idle', 'loading', 'succeeded', 'failed'\n    error: null // This will store the error message, if any\n  },\n\n  reducers: {\n    // You can also define reducers for other actions related to the schedule\n  },\n  extraReducers: {\n    [fetchSchedule.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchSchedule.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload; // Set the schedule data on successful API response\n    },\n\n    [fetchSchedule.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message; // Set the error message on API failure\n    }\n  }\n});\n\n// Export the reducer\nexport default scheduleBuildSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchSchedule","userInput","thunkAPI","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","schedule","error","rejectWithValue","message","scheduleBuildSlice","name","initialState","status","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/scheduleBuildSlice.js"],"sourcesContent":["// scheduleBuildSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n\n// Define an async thunk for fetching the schedule from the Flask API\nexport const fetchSchedule = createAsyncThunk(\n  'schedule/fetchSchedule',\n  async (userInput, thunkAPI) => {\n    try {\n      console.log('Making API call to generate schedule with user input:', userInput);\n      const response = await fetch('http://localhost:5555/generate_schedule', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userInput)\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('Received schedule data from API:', data);\n      return data.schedule; // This should be the schedule data returned from your Flask API\n    } catch (error) {\n      console.error('API call to generate schedule failed:', error);\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\n// Create the schedule slice\nconst scheduleBuildSlice = createSlice({\n  name: 'schedule',\n  initialState: {\n    data: null, // This will store the schedule data\n    status: 'idle', // 'idle', 'loading', 'succeeded', 'failed'\n    error: null // This will store the error message, if any\n  },\n  reducers: {\n    // You can also define reducers for other actions related to the schedule\n  },\n  extraReducers: {\n    [fetchSchedule.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchSchedule.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload; // Set the schedule data on successful API response\n    },\n    [fetchSchedule.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message; // Set the error message on API failure\n    }\n  }\n});\n\n// Export the reducer\nexport default scheduleBuildSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAGhE;AACA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,wBAAwB,EACxB,OAAOE,SAAS,EAAEC,QAAQ,KAAK;EAC7B,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,uDAAuD,EAAEH,SAAS,CAAC;IAC/E,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,SAAS;IAChC,CAAC,CAAC;IACF,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCZ,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEU,IAAI,CAAC;IACrD,OAAOA,IAAI,CAACE,QAAQ,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,OAAOf,QAAQ,CAACgB,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACF,CACF,CAAC;;AAED;AACA,MAAMC,kBAAkB,GAAGtB,WAAW,CAAC;EACrCuB,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZR,IAAI,EAAE,IAAI;IAAE;IACZS,MAAM,EAAE,MAAM;IAAE;IAChBN,KAAK,EAAE,IAAI,CAAC;EACd,CAAC;;EACDO,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAE;IACb,CAACzB,aAAa,CAAC0B,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1CD,KAAK,CAACJ,MAAM,GAAG,SAAS;IAC1B,CAAC;IACD,CAACvB,aAAa,CAAC6B,SAAS,GAAG,CAACF,KAAK,EAAEC,MAAM,KAAK;MAC5CD,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACb,IAAI,GAAGc,MAAM,CAACE,OAAO,CAAC,CAAC;IAC/B,CAAC;;IACD,CAAC9B,aAAa,CAAC+B,QAAQ,GAAG,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC3CD,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACV,KAAK,GAAGW,MAAM,CAACX,KAAK,CAACE,OAAO,CAAC,CAAC;IACtC;EACF;AACF,CAAC,CAAC;;AAEF;AACA,eAAeC,kBAAkB,CAACY,OAAO"},"metadata":{},"sourceType":"module"}