{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n// Define the async thunk action\nexport const postSchedule = createAsyncThunk('schedule/postSchedule', async df_staff => {\n  const response = await fetch('/optimize_schedule', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(df_staff)\n  });\n  return await response.json();\n});\n\n// Define the slice\nconst scheduleBuildSlice = createSlice({\n  name: 'schedule',\n  initialState: {\n    data: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // You can also define reducers for other actions related to the schedule\n  },\n  extraReducers: {\n    [postSchedule.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [postSchedule.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload; // Set the schedule data on successful API response\n    },\n\n    [postSchedule.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message; // Set the error message on API failure\n    }\n  }\n});\n\nexport default scheduleBuildSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","postSchedule","df_staff","response","fetch","method","headers","body","JSON","stringify","json","scheduleBuildSlice","name","initialState","data","status","error","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","message","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/scheduleBuildSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n// Define the async thunk action\nexport const postSchedule = createAsyncThunk(\n  'schedule/postSchedule',\n  async (df_staff) => {\n    const response = await fetch('/optimize_schedule', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(df_staff),\n    });\n    return await response.json();\n  }\n);\n\n// Define the slice\nconst scheduleBuildSlice = createSlice({\n  name: 'schedule',\n  initialState: {\n    data: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // You can also define reducers for other actions related to the schedule\n  },\n  extraReducers: {\n    [postSchedule.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [postSchedule.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload; // Set the schedule data on successful API response\n    },\n    [postSchedule.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message; // Set the error message on API failure\n    }\n  }\n});\n\nexport default scheduleBuildSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;;AAEhE;AACA,OAAO,MAAMC,YAAY,GAAGF,gBAAgB,CAC1C,uBAAuB,EACvB,MAAOG,QAAQ,IAAK;EAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;IACjDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;EAC/B,CAAC,CAAC;EACF,OAAO,MAAMC,QAAQ,CAACO,IAAI,CAAC,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMC,kBAAkB,GAAGX,WAAW,CAAC;EACrCY,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAE;IACb,CAACjB,YAAY,CAACkB,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;MACzCD,KAAK,CAACL,MAAM,GAAG,SAAS;IAC1B,CAAC;IACD,CAACd,YAAY,CAACqB,SAAS,GAAG,CAACF,KAAK,EAAEC,MAAM,KAAK;MAC3CD,KAAK,CAACL,MAAM,GAAG,WAAW;MAC1BK,KAAK,CAACN,IAAI,GAAGO,MAAM,CAACE,OAAO,CAAC,CAAC;IAC/B,CAAC;;IACD,CAACtB,YAAY,CAACuB,QAAQ,GAAG,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC1CD,KAAK,CAACL,MAAM,GAAG,QAAQ;MACvBK,KAAK,CAACJ,KAAK,GAAGK,MAAM,CAACL,KAAK,CAACS,OAAO,CAAC,CAAC;IACtC;EACF;AACF,CAAC,CAAC;;AAEF,eAAed,kBAAkB,CAACe,OAAO"},"metadata":{},"sourceType":"module"}