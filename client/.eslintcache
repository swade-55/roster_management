[{"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/index.js":"1","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/app/store.js":"2","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/App.js":"3","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/NavBar.js":"4","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/MasterOperatingPlan.js":"5","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociateForm.js":"6","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/About.js":"7","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociatesTable.js":"8","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/workersSlice.js":"9","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/metricsSlice.js":"10","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociateRoster.js":"11","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociateCard.js":"12","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ScheduleForm.js":"13","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/scheduleSlice.js":"14","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AllocationSummary.js":"15","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/DepartmentForm.js":"16","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AllocationResults.js":"17","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/allocationSlice.js":"18","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ExecutiveSummary.js":"19"},{"size":553,"mtime":1708039318501,"results":"20","hashOfConfig":"21"},{"size":497,"mtime":1710698874451,"results":"22","hashOfConfig":"21"},{"size":1714,"mtime":1710637871727,"results":"23","hashOfConfig":"21"},{"size":1591,"mtime":1710636965607,"results":"24","hashOfConfig":"21"},{"size":347,"mtime":1710637031017,"results":"25","hashOfConfig":"21"},{"size":6793,"mtime":1710780857301,"results":"26","hashOfConfig":"21"},{"size":3099,"mtime":1708039318501,"results":"27","hashOfConfig":"21"},{"size":3002,"mtime":1710636127377,"results":"28","hashOfConfig":"21"},{"size":4748,"mtime":1710961515047,"results":"29","hashOfConfig":"21"},{"size":3749,"mtime":1710637887517,"results":"30","hashOfConfig":"21"},{"size":2122,"mtime":1710782230421,"results":"31","hashOfConfig":"21"},{"size":5487,"mtime":1710782329301,"results":"32","hashOfConfig":"21"},{"size":2913,"mtime":1710634973077,"results":"33","hashOfConfig":"21"},{"size":1784,"mtime":1710736299021,"results":"34","hashOfConfig":"21"},{"size":377,"mtime":1708039318501,"results":"35","hashOfConfig":"21"},{"size":2360,"mtime":1710782394101,"results":"36","hashOfConfig":"21"},{"size":892,"mtime":1710782633911,"results":"37","hashOfConfig":"21"},{"size":1340,"mtime":1708039318501,"results":"38","hashOfConfig":"21"},{"size":3760,"mtime":1710745221359,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1mb9oqd",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/index.js",[],["80","81"],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/app/store.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/App.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/NavBar.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/MasterOperatingPlan.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociateForm.js",["82"],"import React, { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage} from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { addWorker} from '../features/workersSlice';\nimport * as Yup from 'yup';\nimport { useSelector } from 'react-redux';\n\n\n\nfunction AssociateForm() {\n\n  const dispatch = useDispatch();\n  const [selectedJobClass, setSelectedJobClass] = useState('')\n  const validationSchema = Yup.object({\n    firstName: Yup.string().required('First name is required'),\n    lastName: Yup.string().required('Last name is required'),\n    jobClass_id: Yup.number().required('Job class is required'), \n    uptime: Yup.string().required('Uptime is required'),\n    casesPerHour: Yup.string()\n      .when('jobClass_id', {\n        is: 2,\n        then: (schema) => schema.required('Cases per hour is required'),\n      }),\n    palletsPerHour: Yup.string().when('JobClass_id', {\n      is: 1 || 3 || 4 || 5,\n      then: (schema) => schema.required('Pallets per hour is required'),\n    }),\n    attendance: Yup.string().required('Attendance is required'),\n    department: Yup.string().required('Department is required'),\n    hireDate: Yup.date().required('Hire date is required'),\n  });\n\n\n  const handleJobClassChange = (setFieldValue, value) => {\n    console.log('Selected Job Class:', value); // Debug log\n    setFieldValue(\"jobClass_id\", value);\n    setSelectedJobClass(value);\n  }\n\n  const workers = useSelector(state => state.workers.workers);\n  const uniqueDepartments = [...new Set(workers.filter(worker => worker.department).map(worker => worker.department.name))];\n  console.log('unique departments', uniqueDepartments);\n  // const uniqueJobClasses = [...new Set(workers.filter(worker => worker.jobclass).map(worker => worker.jobclass.name))];\n  const uniqueJobClasses = workers\n  .map(worker => worker.jobclass) // Get all jobclass objects\n  .filter(jobclass => jobclass !== null && jobclass !== undefined) // Filter out null/undefined jobclass\n  .reduce((acc, jobclass) => {\n    // Check if the jobclass id is already in the accumulator\n    const exists = acc.some(item => item.id === jobclass.id);\n    if (!exists) {\n      // If it does not exist, add the jobclass to the accumulator\n      acc.push(jobclass);\n    }\n    return acc;\n  }, []); // Initialize the accumulator as an empty array\n  console.log('uniqueJobClasses',uniqueJobClasses)\n  \n\n  // Initial values for the form\n  const initialValues = {\n    firstName: '',\n    lastName: '',\n    jobClass_id: '', \n    uptime: '', \n    casesPerHour: '',\n    palletsPerHour: '',\n    attendance: '',\n    department: '',\n    hireDate: '',\n  };\n\n\n  // onSubmit function with Redux dispatch\n  const onSubmit = (values, { setSubmitting, resetForm }) => {\n    console.log('Submitting Form with Values:', values); // Debug log\n\n    // Prepare the metrics object\n    let metrics = [];\n    const metricNames = {\n      uptime: 'Uptime',\n      casesPerHour: 'CasesPerHour',\n      palletsPerHour: 'PalletsPerHour',\n      attendance: 'Attendance'\n    };\n\n    Object.keys(metricNames).forEach(key => {\n      if (values[key]) {\n        metrics.push({\n          name: metricNames[key],\n          value: values[key]\n        });\n      }\n    });\n\n    // Create the payload to send to the server\n    const payload = {\n      firstName: values.firstName,\n      lastName: values.lastName,\n      jobClass_id: parseInt(values.jobClass_id, 10), \n      metrics: metrics,\n      department: values.department,\n      hireDate: values.hireDate,\n    };\n\n    console.log('Attempting to submit form with values:', payload);\n\n\n    dispatch(addWorker(payload))\n      .unwrap()\n      .then(addedWorker => {\n        console.log('Form submission successful, added worker:', addedWorker);\n        resetForm();\n      })\n      .catch(error => {\n        console.error('Form submission error:', error);\n      })\n      .finally(() => {\n        setSubmitting(false);\n      });\n  };\n\n\n  return (\n    <div>\n      <h3>Add an Associate!</h3>\n      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n        {({ isSubmitting, setFieldValue }) => (\n          <Form>\n            <label htmlFor=\"jobClass_id\">Job Class</label>\n            <Field as=\"select\" name=\"jobClass_id\" onChange={e => {\n              const value = e.target.value;\n              setFieldValue(\"jobClass_id\", value);\n              setSelectedJobClass(value);\n            }}>\n              <option value=\"\">Select a Job Class</option>\n              {uniqueJobClasses.map(jobClass => (\n                <option key={jobClass.id} value={jobClass.id}>{jobClass.name}</option>\n              ))}\n            </Field>\n            <ErrorMessage name=\"jobClass_id\" component=\"div\" className=\"error\" />\n\n            {/* Always visible fields */}\n            <Field name=\"firstName\" placeholder=\"First Name\" />\n            <ErrorMessage name=\"firstName\" component=\"div\" className=\"error\" />\n\n            <Field name=\"lastName\" placeholder=\"Last Name\" />\n            <ErrorMessage name=\"lastName\" component=\"div\" className=\"error\" />\n\n            {/* Conditional Fields based on jobClass_id */}\n            {selectedJobClass && (\n              <>\n                <Field name=\"uptime\" placeholder=\"Uptime\" />\n                <ErrorMessage name=\"uptime\" component=\"div\" className=\"error\" />\n\n                <Field name=\"attendance\" placeholder=\"Attendance\" />\n                <ErrorMessage name=\"attendance\" component=\"div\" className=\"error\" />\n\n                {selectedJobClass === '2' && (\n                  <>\n                    <Field name=\"casesPerHour\" placeholder=\"Cases Per Hour\" />\n                    <ErrorMessage name=\"casesPerHour\" component=\"div\" className=\"error\" />\n                  </>\n                )}\n\n                {['1', '3', '4', '5'].includes(selectedJobClass) && (\n                  <>\n                    <Field name=\"palletsPerHour\" placeholder=\"Pallets Per Hour\" />\n                    <ErrorMessage name=\"palletsPerHour\" component=\"div\" className=\"error\" />\n                  </>\n                )}\n\n                <Field as=\"select\" name=\"department\">\n                  <option value=\"\">Select a Department</option>\n                  {uniqueDepartments.map((department, index) => (\n                    <option key={index} value={department}>{department}</option>\n                  ))}\n                </Field>\n                <ErrorMessage name=\"department\" component=\"div\" className=\"error\" />\n\n                <Field name=\"hireDate\" type=\"date\" />\n                <ErrorMessage name=\"hireDate\" component=\"div\" className=\"error\" />\n              </>\n            )}\n\n            <button type=\"submit\" disabled={isSubmitting}>Submit</button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default AssociateForm;","/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/About.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociatesTable.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/workersSlice.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/metricsSlice.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociateRoster.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AssociateCard.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ScheduleForm.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/scheduleSlice.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AllocationSummary.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/DepartmentForm.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/AllocationResults.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/features/allocationSlice.js",[],"/home/samuelrcwade/Development/Code/Phase4/roster_management/client/src/components/ExecutiveSummary.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":34,"column":9,"nodeType":"89","messageId":"90","endLine":34,"endColumn":29},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'handleJobClassChange' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]